{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "statustedit",
        "designer|userClassName": "manager.status.StatusEditViewController"
    },
    "name": "manager.point.PointEditViewController1",
    "designerId": "f838a623-9f3e-4cde-856f-a7f52c2d69ce",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "errorMsg",
                "implHandler": [
                    "    Ext.toast({",
                    "        title: '저장 실패' ,",
                    "        html: '필드값을 다시 확인해주세요.',",
                    "        align: 't',",
                    "        bodyPadding:10",
                    "    });"
                ]
            },
            "name": "errorMsg",
            "designerId": "6fd38e17-9a72-404c-a29d-4a7b8881700e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCancelStatus",
                "implHandler": [
                    "var isDirtyStatus = this.getViewModel().get('theStatus').dirty;",
                    "var isStatusClass = Ext.getStore('StatusClass').getModifiedRecords().length;",
                    "var isStatusClassR= Ext.getStore('StatusClass').getRemovedRecords().length;",
                    "",
                    "if(!this.getViewModel().get('theStatus').create) {",
                    "",
                    "",
                    "    if(!isDirtyStatus)  {",
                    "",
                    "        if(isStatusClass || isStatusClassR) {",
                    "            var statusClassesStore = Ext.getStore('StatusClass');",
                    "            statusClassesStore.rejectChanges();",
                    "            console.log('aaa');",
                    "",
                    "",
                    "            var mydata = this.getViewModel().get('theStatus').get('classes');",
                    "            statusClassesStore.loadRawData(mydata, false);",
                    "        }",
                    "        ",
                    "",
                    "    } else {",
                    "",
                    "        var modifiedData = this.getViewModel().get('theStatus').modified;",
                    "",
                    "        var isName \t\t\t= modifiedData.name;",
                    "        var isDescription\t= modifiedData.description;",
                    "        var isGetMethod\t\t= modifiedData.relation_method;",
                    "        var isGetObject\t\t= modifiedData.relation_object;",
                    "        var isClasses\t\t= modifiedData.classes;",
                    "",
                    "",
                    "        var me = this;",
                    "",
                    "        if(isName) {",
                    "            this.getViewModel().get('theStatus').set('name', isName);",
                    "        }",
                    "",
                    "        if(isDescription) {",
                    "            this.getViewModel().get('theStatus').set('description', isDescription);",
                    "        }",
                    "",
                    "",
                    "        if(isGetMethod || isGetObject) {",
                    "",
                    "            var identifiedMethod;",
                    "            var identifiedObject;",
                    "",
                    "            var method_radiogroup\t= this.lookupReference('relation_method');",
                    "            var factor_combobox\t\t= this.lookupReference('relation_factor');",
                    "",
                    "            if(isGetMethod) {",
                    "",
                    "                this.getViewModel().get('theStatus').set('relation_method', isGetMethod);",
                    "                identifiedMethod\t= isGetMethod;",
                    "                identifiedObject\t= this.getViewModel().get('theStatus').get('relation_object');",
                    "            }",
                    "",
                    "            if(isGetObject) {",
                    "",
                    "                this.getViewModel().get('theStatus').set('relation_object', isGetObject);",
                    "                identifiedMethod\t= this.getViewModel().get('theStatus').get('relation_method');",
                    "                identifiedObject\t= isGetObject;",
                    "",
                    "            }",
                    "",
                    "            if(identifiedMethod == 'point_type') {",
                    "",
                    "                method_radiogroup.items.items[0].setValue(true);",
                    "",
                    "                var pointRecord = me.onFindNameInStore('Point', identifiedObject, 'id');",
                    "",
                    "                if(pointRecord !== null) {",
                    "                    factor_combobox.setValue(pointRecord.get('name'));",
                    "                }",
                    "",
                    "",
                    "            } else if(identifiedMethod == 'level_type') {",
                    "",
                    "                method_radiogroup.items.items[1].setValue(true);",
                    "",
                    "                var levelRecord = me.onFindNameInStore('Level', identifiedObject, 'id');",
                    "",
                    "                if(levelRecord !== null) {",
                    "                    factor_combobox.setValue(levelRecord.get('name'));",
                    "                }",
                    "",
                    "            } else if(identifiedMethod == 'mission_type') {",
                    "",
                    "                method_radiogroup.items.items[2].setValue(true);",
                    "",
                    "                var missionRecord = me.onFindNameInStore('Mission', identifiedObject, 'id');",
                    "",
                    "                if(missionRecord !== null) {",
                    "                    factor_combobox.setValue(missionRecord.get('name'));",
                    "                }",
                    "            }",
                    "",
                    "",
                    "",
                    "            if(identifiedObject !== 'mission_id') {",
                    "",
                    "                var isCondition = this.lookupReference('condition');",
                    "",
                    "                isCondition.setEditor({",
                    "                    xtype: 'numberfield',",
                    "                    allowBlank: false",
                    "                });",
                    "",
                    "            } else {",
                    "",
                    "                var isCondition = this.lookupReference('condition');",
                    "",
                    "                isCondition.setEditor({",
                    "                    xtype: 'numberfield',",
                    "                    allowBlank: false,",
                    "                    editable: false,",
                    "                    disabled: true",
                    "                });",
                    "",
                    "            }",
                    "",
                    "",
                    "        }",
                    "        ",
                    "        var statusStore= Ext.getStore('Status');",
                    "        statusStore.rejectChanges();",
                    "        ",
                    "",
                    "",
                    "        if(isStatusClass || isStatusClassR) {",
                    "",
                    "            var statusClassesStore = Ext.getStore('StatusClass');",
                    "            statusClassesStore.rejectChanges();          ",
                    "",
                    "            var mydata = this.getViewModel().get('theStatus').get('classes');",
                    "           ",
                    "            statusClassesStore.loadRawData(mydata, false);",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "name": "onCancelStatus",
            "designerId": "659efe19-bd11-450c-b787-21305771d2fe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeName",
                    "findId",
                    "recordName"
                ],
                "fn": "onFindNameInStore",
                "implHandler": [
                    "var store \t\t= Ext.getStore(storeName);",
                    "var findRecord\t= store.findRecord(recordName, findId);",
                    "return findRecord;"
                ]
            },
            "name": "onFindNameInStore",
            "designerId": "0ae0c35c-fb05-4229-8fe9-d479ff18fd4b"
        }
    ]
}