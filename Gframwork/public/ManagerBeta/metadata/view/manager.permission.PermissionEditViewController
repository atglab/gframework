{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "permissionedit",
        "designer|userClassName": "manager.permission.PermissionEditViewController"
    },
    "name": "manager.activity.ActivityEditViewController1",
    "designerId": "9a2cb8f2-ce24-4918-bbc8-7d3325dc3d04",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCancelPermission",
                "implHandler": [
                    "var permission\t= this.getViewModel().get('thePermission');",
                    "var me\t\t\t= this;",
                    "",
                    "if(!permission.dirty)  {",
                    "",
                    "} else {",
                    "    if(!permission.create) {",
                    "",
                    "        Ext.getStore('Permission').rejectChanges();",
                    "",
                    "",
                    "        var method_radiogroup\t\t= this.lookupReference('getMethod');",
                    "",
                    "",
                    "",
                    "        var pointComboBox \t\t\t= this.lookupReference('pointComboBox');",
                    "        var pointMax \t\t\t\t= this.lookupReference('pointMax');",
                    "        var maxPointDisplayField\t= this.lookupReference('maxPointDisplayField');",
                    "",
                    "",
                    "        var levelComboBox \t\t\t= this.lookupReference('levelComboBox');",
                    "        var levelMax \t\t\t\t= this.lookupReference('levelMax');",
                    "        var maxLevelDisplayField\t= this.lookupReference('maxLevelDisplayField');",
                    "",
                    "",
                    "        var statusComboBox \t\t\t= this.lookupReference('statusComboBox');",
                    "        var subStatusComboBox\t\t= this.lookupReference('subStatusComboBox');",
                    "",
                    "",
                    "        var permission\t\t\t\t= this.getViewModel().get('thePermission');",
                    "        var get_method \t\t\t\t= this.getViewModel().get('thePermission').get('relation_method');",
                    "        var get_object\t\t\t\t= this.getViewModel().get('thePermission').get('relation_object');",
                    "        var get_parameter\t\t\t= this.getViewModel().get('thePermission').get('get_parameter');",
                    "",
                    "",
                    "        //획득방식에 따른 Radio버튼 위치 및 획득 Object 설정",
                    "        if(get_method == 'basic_type') {\t\t\t//획득방식이 기본일 경우,",
                    "",
                    "            method_radiogroup.items.items[0].items.items[0].setValue(true);",
                    "",
                    "            pointComboBox.setDisabled(true);",
                    "            pointMax.setDisabled(true);",
                    "            maxPointDisplayField.setDisabled(true);",
                    "",
                    "            levelComboBox.setDisabled(true);",
                    "            levelMax.setDisabled(true);",
                    "            maxLevelDisplayField.setDisabled(true);",
                    "",
                    "            statusComboBox.setDisabled(true);",
                    "            subStatusComboBox.setDisabled(true);",
                    "",
                    "        } else if(get_method == 'point_type') {\t\t//획득방식이 point일 경우,",
                    "",
                    "            method_radiogroup.items.items[1].items.items[0].setValue(true);",
                    "",
                    "            pointComboBox.setDisabled(false);",
                    "            pointMax.setDisabled(false);",
                    "            maxPointDisplayField.setDisabled(false);",
                    "",
                    "            levelComboBox.setDisabled(true);",
                    "            levelMax.setDisabled(true);",
                    "            maxLevelDisplayField.setDisabled(true);",
                    "",
                    "            statusComboBox.setDisabled(true);",
                    "            subStatusComboBox.setDisabled(true);",
                    "",
                    "            pointComboBox.setValue(get_object);",
                    "            pointMax.setValue(get_parameter);",
                    "            pointMax.setMaxValue(get_parameter);",
                    "",
                    "",
                    "",
                    "        } else if(get_method == 'level_type') {\t\t//획득방식이 level 경우,",
                    "",
                    "            method_radiogroup.items.items[2].items.items[0].setValue(true);",
                    "",
                    "            pointComboBox.setDisabled(true);",
                    "            pointMax.setDisabled(true);",
                    "            maxPointDisplayField.setDisabled(true);",
                    "",
                    "            levelComboBox.setDisabled(false);",
                    "            levelMax.setDisabled(false);",
                    "            maxLevelDisplayField.setDisabled(false);",
                    "",
                    "            statusComboBox.setDisabled(true);",
                    "            subStatusComboBox.setDisabled(true);",
                    "",
                    "            levelComboBox.setValue(get_object);",
                    "            levelMax.setValue(get_parameter);",
                    "            levelMax.setMaxValue(get_parameter);",
                    "",
                    "        } else if(get_method == 'status_type') {\t//획득방식이 status일 경우,",
                    "",
                    "            method_radiogroup.items.items[3].items.items[0].setValue(true);",
                    "",
                    "            pointComboBox.setDisabled(true);",
                    "            pointMax.setDisabled(true);",
                    "            maxPointDisplayField.setDisabled(true);",
                    "",
                    "            levelComboBox.setDisabled(true);",
                    "            levelMax.setDisabled(true);",
                    "            maxLevelDisplayField.setDisabled(true);",
                    "",
                    "            statusComboBox.setDisabled(false);",
                    "            subStatusComboBox.setDisabled(false);",
                    "",
                    "",
                    "            var statusRecord\t\t= me.onFindNameInStore('Status', get_object, 'id');",
                    "",
                    "            var StatusClassStore = Ext.getStore('StatusClass');",
                    "            var mydata = statusRecord.get('classes');",
                    "            StatusClassStore.loadData(mydata, false);",
                    "",
                    "            statusComboBox.setValue(statusRecord.get('id'));",
                    "            subStatusComboBox.setValue(statusRecord.get('classes')[get_parameter-1].name);",
                    "",
                    "",
                    "        } else {\t\t\t\t\t\t\t\t\t//획득방식이 mission일 경우,",
                    "",
                    "            method_radiogroup.items.items[4].items.items[0].setValue(true);",
                    "",
                    "        }",
                    "",
                    "    }",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "onCancelPermission",
            "designerId": "66043221-caaa-4805-8f30-7d794861af89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeName",
                    "findId",
                    "recordName"
                ],
                "fn": "onFindNameInStore",
                "implHandler": [
                    "var store \t\t= Ext.getStore(storeName);",
                    "var findRecord\t= store.findRecord(recordName, findId);",
                    "return findRecord;"
                ]
            },
            "name": "onFindNameInStore",
            "designerId": "00eb0cda-3b82-48d7-b8e6-e6db097a73cd"
        }
    ]
}