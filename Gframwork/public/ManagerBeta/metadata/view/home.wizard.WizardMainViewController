{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "wizardmain",
        "designer|userClassName": "home.wizard.WizardMainViewController"
    },
    "designerId": "bdf8a151-9eb5-43c8-8408-624928479d61",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#card-next",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNextButtonClick",
                "implHandler": [
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var tabPanel = button.up('tabpanel');",
                    "    var thisPanel = button.up('panel');",
                    "    var wizardTabConfig1\t= this.lookupReference('wizardTabConfig1');",
                    "    var wizardTabConfig2\t= this.lookupReference('wizardTabConfig2');",
                    "    var wizardTabConfig3\t= this.lookupReference('wizardTabConfig3');",
                    "",
                    "",
                    "    var ref_this = thisPanel.getReference();",
                    "    var me\t\t= this;",
                    "",
                    "    var nextPanel;",
                    "",
                    "    if(ref_this == 'step1'){",
                    "",
                    "        var next_btn = me.lookupReference('next_btn1');",
                    "        next_btn.disable();",
                    "        wizardTabConfig1.disable();",
                    "",
                    "        nextPanel = this.lookupReference('step2');",
                    "",
                    "    } else if(ref_this == 'step2'){",
                    "",
                    "        wizardTabConfig2.disable();",
                    "        nextPanel = this.lookupReference('step3');",
                    "",
                    "    } else if(ref_this == 'step3'){",
                    "",
                    "        wizardTabConfig3.disable();",
                    "        var next_btn = me.lookupReference('next_btn3');",
                    "        next_btn.disable();",
                    "",
                    "        nextPanel = this.lookupReference('step4');",
                    "",
                    "    }",
                    "",
                    "    nextPanel.enable();",
                    "    tabPanel.setActiveTab(nextPanel);",
                    "",
                    "} else {",
                    "    Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){",
                    "        if (btn == 'ok') {            ",
                    "        }",
                    "    }, this);",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNextButtonClick",
            "designerId": "af90e55b-3d5e-441d-91e4-c757c9a6c2aa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#submit_btn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSubmitButtonClick",
                "implHandler": [
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var tabPanel = button.up('tabpanel');",
                    "    var thisPanel = button.up('panel');",
                    "    var me = this;",
                    "    tabPanel.hide();",
                    "",
                    "    var wizardTabConfig4\t= this.lookupReference('wizardTabConfig4');",
                    "    wizardTabConfig4.disable();",
                    "",
                    "",
                    "    var nextPanel = this.lookupReference('step1');",
                    "    nextPanel.enable();",
                    "    tabPanel.setActiveTab(nextPanel);",
                    "",
                    "    me.fireViewEvent('tabpanelSubRemoveAll1', this, null);",
                    "    me.restartMechanics();",
                    "    ",
                    "",
                    "} else {",
                    "    Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){",
                    "        if (btn == 'ok') {",
                    "        }",
                    "    }, this);",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onSubmitButtonClick",
            "designerId": "b42b3386-3930-4c38-b13b-19c614218de2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#card-prev",
                "designer|targetType": "Ext.button.Button",
                "fn": "onPreviousButtonClick",
                "implHandler": [
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var tabPanel = button.up('tabpanel');",
                    "    var thisPanel = button.up('panel');",
                    "    var ref_this = thisPanel.getReference();",
                    "",
                    "    var prevPanel;",
                    "",
                    "    var wizardTabConfig2\t= this.lookupReference('wizardTabConfig2');",
                    "    var wizardTabConfig3\t= this.lookupReference('wizardTabConfig3');",
                    "    var wizardTabConfig4\t= this.lookupReference('wizardTabConfig4');",
                    "",
                    "    if(ref_this == 'step4'){",
                    "",
                    "        wizardTabConfig4.disable();",
                    "        prevPanel = this.lookupReference('step3');",
                    "",
                    "    } else if(ref_this == 'step3'){",
                    "",
                    "        wizardTabConfig3.disable();",
                    "        prevPanel = this.lookupReference('step2');",
                    "",
                    "    } else if(ref_this == 'step2'){",
                    "",
                    "        wizardTabConfig2.disable();",
                    "        prevPanel = this.lookupReference('step1');",
                    "",
                    "    }",
                    "",
                    "    prevPanel.enable();",
                    "    tabPanel.setActiveTab(prevPanel);",
                    "} else {",
                    "    Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){",
                    "        if (btn == 'ok') {            ",
                    "        }",
                    "    }, this);",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onPreviousButtonClick",
            "designerId": "433d2ee9-fcad-479c-872b-8cacd5fb62f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetUserData",
                "implHandler": [
                    "",
                    "var me \t\t\t= this;",
                    "var radioGroup\t= this.lookupReference('wizardRadio01');",
                    "var tempType;",
                    "",
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var key = Ext.getStore('ManagerInfo').data.items[0].get('key');",
                    "    var token = Ext.getStore('ManagerInfo').data.items[0].get('token');",
                    "",
                    "    if(radioGroup.items.items[0].value) {\t\t\t//all",
                    "        tempType\t= 'all';",
                    "    } else if(radioGroup.items.items[1].value) {\t//part",
                    "        tempType\t= 'init';",
                    "    }",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: '/api/v1/manager/init/reset',",
                    "        method: 'GET',",
                    "        headers: {",
                    "            'x-key': key,",
                    "            'x-access-token': token",
                    "        },",
                    "        params:{",
                    "            type: tempType",
                    "        },",
                    "        success: function(response){",
                    "            var decodeResponse \t\t= Ext.decode(response.responseText);",
                    "",
                    "            if(decodeResponse.success) {",
                    "                var next_btn = me.lookupReference('next_btn1');",
                    "                next_btn.enable();",
                    "            }",
                    "        },",
                    "        failure: function(response){console.log(response);}",
                    "",
                    "    });",
                    "}"
                ]
            },
            "name": "resetUserData",
            "designerId": "1be61430-2958-4522-96fa-27b6ef8e7eba"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadRepositorySet",
                "implHandler": [
                    "",
                    "var me \t\t\t\t\t= this;",
                    "var dataTypeRadioGroup\t= this.lookupReference('dataTypeRadioGroup');",
                    "var dataType\t\t\t= dataTypeRadioGroup.lastValue.dataType;",
                    "",
                    "",
                    "var nStart = new Date().getTime();     ",
                    "console.log('게임 메카닉 생성 시작 시점');",
                    "",
                    " ",
                    "      ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var key = Ext.getStore('ManagerInfo').data.items[0].get('key');",
                    "    var token = Ext.getStore('ManagerInfo').data.items[0].get('token');",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: '/api/v1/manager/init/load/' + dataType,",
                    "        method: 'GET',",
                    "        headers: {",
                    "            'x-key': key,",
                    "            'x-access-token': token",
                    "        },",
                    "        success: function(response){",
                    "            var decodeResponse \t\t= Ext.decode(response.responseText);",
                    "",
                    "            if(decodeResponse.success) {",
                    "                var next_btn = me.lookupReference('next_btn3');",
                    "                next_btn.enable();                ",
                    "                ",
                    "                var nEnd =  new Date().getTime();",
                    "                console.log('게임 메카닉 생성 종료 시점');",
                    "               ",
                    "                var nDiff = nEnd - nStart;     ",
                    "                ",
                    "                console.log('게임 메카닉 생성 기능 반응 시간 : '+ nDiff + ' (ms)');",
                    "",
                    "                Ext.toast({",
                    "                    title: '게임 메카닉 생성 완료' ,",
                    "                    html: '게임 메카닉이 성공적으로 생성 되었습니다.',",
                    "                    align: 't',",
                    "                    bodyPadding:10",
                    "                });",
                    "            }",
                    "        },",
                    "        failure: function(response){console.log(response);}",
                    "    });",
                    "}",
                    "",
                    ""
                ]
            },
            "name": "loadRepositorySet",
            "designerId": "f749c898-b094-4314-b2cf-a378d60021d3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "restartMechanics",
                "implHandler": [
                    "if(Ext.getStore('ManagerInfo').data.length !== 0) {",
                    "    var key = Ext.getStore('ManagerInfo').data.items[0].get('key');",
                    "    var token = Ext.getStore('ManagerInfo').data.items[0].get('token');",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: '/api/v1/manager/init/restart',",
                    "        method: 'GET',",
                    "        headers: {",
                    "            'x-key': key,",
                    "            'x-access-token': token",
                    "        },",
                    "        success: function(response){",
                    "            var decodeResponse \t\t= Ext.decode(response.responseText);",
                    "",
                    "            if(decodeResponse.success) {",
                    "",
                    "                Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "                Ext.getStore('RepoStatus').proxy.headers = { 'x-key': key, 'x-access-token': token };",
                    "",
                    "",
                    "",
                    "                Ext.getStore('User').load();",
                    "                Ext.getStore('Activity').load();",
                    "                Ext.getStore('ActivityMission').load();",
                    "                Ext.getStore('Mission').load();",
                    "                Ext.getStore('Badge').load();",
                    "                Ext.getStore('Point').load();",
                    "                Ext.getStore('Level').load();",
                    "                Ext.getStore('Status').load();",
                    "                Ext.getStore('Permission').load();",
                    "                Ext.getStore('StatusClass').load();",
                    "                Ext.getStore('Rule').load();",
                    "                Ext.getStore('RepoStatus').load();",
                    "",
                    "                Ext.toast({",
                    "                    title: '게임 메카닉 로딩' ,",
                    "                    html: '새로운 게임 메카닉이 성공적으로 재시작 되었습니다.',",
                    "                    align: 't',",
                    "                    bodyPadding:10",
                    "                });",
                    "            }",
                    "        },",
                    "        failure: function(response){console.log(response);}",
                    "    });",
                    "",
                    "} else {",
                    "    Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){",
                    "        if (btn == 'ok') {            ",
                    "        }",
                    "    }, this);",
                    "",
                    "}",
                    "",
                    ""
                ]
            },
            "name": "restartMechanics",
            "designerId": "04043b14-faa2-4710-869b-6f42362c64c7"
        }
    ]
}