/*
 * File: app/view/home/wizard/WizardMainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.home.wizard.WizardMainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.wizardmain',

    control: {
        "button#card-next": {
            click: 'onNextButtonClick'
        },
        "button#submit_btn": {
            click: 'onSubmitButtonClick'
        },
        "button#card-prev": {
            click: 'onPreviousButtonClick'
        }
    },

    onNextButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var tabPanel = button.up('tabpanel');
            var thisPanel = button.up('panel');
            var wizardTabConfig1	= this.lookupReference('wizardTabConfig1');
            var wizardTabConfig2	= this.lookupReference('wizardTabConfig2');
            var wizardTabConfig3	= this.lookupReference('wizardTabConfig3');


            var ref_this = thisPanel.getReference();
            var me		= this;

            var nextPanel;

            if(ref_this == 'step1'){

                var next_btn = me.lookupReference('next_btn1');
                next_btn.disable();
                wizardTabConfig1.disable();

                nextPanel = this.lookupReference('step2');

            } else if(ref_this == 'step2'){

                wizardTabConfig2.disable();
                nextPanel = this.lookupReference('step3');

            } else if(ref_this == 'step3'){

                wizardTabConfig3.disable();
                var next_btn = me.lookupReference('next_btn3');
                next_btn.disable();

                nextPanel = this.lookupReference('step4');

            }

            nextPanel.enable();
            tabPanel.setActiveTab(nextPanel);

        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    onSubmitButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var tabPanel = button.up('tabpanel');
            var thisPanel = button.up('panel');
            var me = this;
            tabPanel.hide();

            var wizardTabConfig4	= this.lookupReference('wizardTabConfig4');
            wizardTabConfig4.disable();


            var nextPanel = this.lookupReference('step1');
            nextPanel.enable();
            tabPanel.setActiveTab(nextPanel);

            me.fireViewEvent('tabpanelSubRemoveAll1', this, null);
            me.restartMechanics();


        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    onPreviousButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var tabPanel = button.up('tabpanel');
            var thisPanel = button.up('panel');
            var ref_this = thisPanel.getReference();

            var prevPanel;

            var wizardTabConfig2	= this.lookupReference('wizardTabConfig2');
            var wizardTabConfig3	= this.lookupReference('wizardTabConfig3');
            var wizardTabConfig4	= this.lookupReference('wizardTabConfig4');

            if(ref_this == 'step4'){

                wizardTabConfig4.disable();
                prevPanel = this.lookupReference('step3');

            } else if(ref_this == 'step3'){

                wizardTabConfig3.disable();
                prevPanel = this.lookupReference('step2');

            } else if(ref_this == 'step2'){

                wizardTabConfig2.disable();
                prevPanel = this.lookupReference('step1');

            }

            prevPanel.enable();
            tabPanel.setActiveTab(prevPanel);
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    resetUserData: function() {

        var me 			= this;
        var radioGroup	= this.lookupReference('wizardRadio01');
        var tempType;

        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

            if(radioGroup.items.items[0].value) {			//all
                tempType	= 'all';
            } else if(radioGroup.items.items[1].value) {	//part
                tempType	= 'init';
            }

            Ext.Ajax.request({
                url: '/api/v1/manager/init/reset',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    type: tempType
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    if(decodeResponse.success) {
                        var next_btn = me.lookupReference('next_btn1');
                        next_btn.enable();
                    }
                },
                failure: function(response){console.log(response);}

            });
        }
    },

    loadRepositorySet: function() {

        var me 					= this;
        var dataTypeRadioGroup	= this.lookupReference('dataTypeRadioGroup');
        var dataType			= dataTypeRadioGroup.lastValue.dataType;


        var nStart = new Date().getTime();
        console.log('게임 메카닉 생성 시작 시점');








        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

            Ext.Ajax.request({
                url: '/api/v1/manager/init/load/' + dataType,
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    if(decodeResponse.success) {
                        var next_btn = me.lookupReference('next_btn3');
                        next_btn.enable();

                        var nEnd =  new Date().getTime();
                        console.log('게임 메카닉 생성 종료 시점');

                        var nDiff = nEnd - nStart;

                        console.log('게임 메카닉 생성 기능 반응 시간 : '+ nDiff + ' (ms)');

                        Ext.toast({
                            title: '게임 메카닉 생성 완료' ,
                            html: '게임 메카닉이 성공적으로 생성 되었습니다.',
                            align: 't',
                            bodyPadding:10
                        });
                    }
                },
                failure: function(response){console.log(response);}
            });
        }


    },

    restartMechanics: function() {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

            Ext.Ajax.request({
                url: '/api/v1/manager/init/restart',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    if(decodeResponse.success) {

                        Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('RepoStatus').proxy.headers = { 'x-key': key, 'x-access-token': token };



                        Ext.getStore('User').load();
                        Ext.getStore('Activity').load();
                        Ext.getStore('ActivityMission').load();
                        Ext.getStore('Mission').load();
                        Ext.getStore('Badge').load();
                        Ext.getStore('Point').load();
                        Ext.getStore('Level').load();
                        Ext.getStore('Status').load();
                        Ext.getStore('Permission').load();
                        Ext.getStore('StatusClass').load();
                        Ext.getStore('Rule').load();
                        Ext.getStore('RepoStatus').load();

                        Ext.toast({
                            title: '게임 메카닉 로딩' ,
                            html: '새로운 게임 메카닉이 성공적으로 재시작 되었습니다.',
                            align: 't',
                            bodyPadding:10
                        });
                    }
                },
                failure: function(response){console.log(response);}
            });

        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }


    },

    onInitialDataButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            this.resetUserData();
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }

    },

    onCreateMechaButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            this.loadRepositorySet();
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    }

});
