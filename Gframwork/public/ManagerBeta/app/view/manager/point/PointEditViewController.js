/*
 * File: app/view/manager/point/PointEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.point.PointEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.pointedit',

    onCancelPoint: function() {
        var point			= this.getViewModel().get('thePoint');
        var isDirtyPoint	= point.dirty;
        if(isDirtyPoint)  {
            if(!point.create) {
                Ext.getStore('Point').rejectChanges();

                var pointIcon = this.lookupReference('pointIcon');
                this.onSelectedPointIcon(pointIcon);
            }
        }
    },

    onSaveError: function(poistion) {
        Ext.toast({
            title: 'Point-저장 실패' ,
            html: '필드값을 다시 확인해주세요.',
            align: 't',
            bodyPadding:10
        });
    },

    onSelectedPointIcon: function(component) {
        var point	= this.getViewModel().get('thePoint');

        if(!point.create) {
            if(point.get('icon') == '/resources/images/points/point_mark.png') {
                component.selModel.select(component.dataSource.data.items[0]);
            } else if(point.get('icon') == '/resources/images/points/point_medal.png') {
                component.selModel.select(component.dataSource.data.items[1]);
            } else if(point.get('icon') == '/resources/images/points/point_potion.png') {
                component.selModel.select(component.dataSource.data.items[2]);
            } else if(point.get('icon') == '/resources/images/points/point_star.png') {
                component.selModel.select(component.dataSource.data.items[3]);
            } else if(point.get('icon') == '/resources/images/points/point_bill.png') {
                component.selModel.select(component.dataSource.data.items[4]);
            } else if(point.get('icon') == '/resources/images/points/point_exp_1.png') {
                component.selModel.select(component.dataSource.data.items[5]);
            } else if(point.get('icon') == '/resources/images/points/point_exp_2.png') {
                component.selModel.select(component.dataSource.data.items[6]);
            } else if(point.get('icon') == '/resources/images/points/point_gold.png') {
                component.selModel.select(component.dataSource.data.items[7]);
            } else if(point.get('icon') == '/resources/images/points/point_user.png') {
                component.selModel.select(component.dataSource.data.items[8]);
            } else if(point.get('icon') == '/resources/images/points/point_pen.png') {
                component.selModel.select(component.dataSource.data.items[9]);
            } else if(point.get('icon') == '/resources/images/points/point_report.png') {
                component.selModel.select(component.dataSource.data.items[10]);
            } else if(point.get('icon') == '/resources/images/points/point_subscription.png') {
                component.selModel.select(component.dataSource.data.items[11]);
            } else if(point.get('icon') == '/resources/images/points/point_download.png') {
                component.selModel.select(component.dataSource.data.items[12]);
            } else if(point.get('icon') == '/resources/images/points/point_sponsor.png') {
                component.selModel.select(component.dataSource.data.items[13]);
            } else if(point.get('icon') == '/resources/images/points/point_car.png') {
                component.selModel.select(component.dataSource.data.items[14]);
            } else if(point.get('icon') == '/resources/images/points/point_game_user.png') {
                component.selModel.select(component.dataSource.data.items[15]);
            } else if(point.get('icon') == '/resources/images/points/point_game.png') {
                component.selModel.select(component.dataSource.data.items[16]);
            } else if(point.get('icon') == '/resources/images/points/point_game_download.png') {
                component.selModel.select(component.dataSource.data.items[17]);
            } else if(point.get('icon') == '/resources/images/points/point_movie.png') {
                component.selModel.select(component.dataSource.data.items[18]);
            }

        }
    },

    onPointSaveButtonClick: function(button, e, eOpts) {
        var pointEditTab = button.up('pointedit');
        var me = this;

        var savePoint = pointEditTab.getViewModel().get('thePoint');

        if(savePoint.create) {
            var max 	= savePoint.max;
            var min 	= savePoint.min;


            if(pointEditTab.isValid()) {

                if(!savePoint.id || !savePoint.name || !savePoint.description || !savePoint.max || !savePoint.icon) {
                    me.onSaveError('필수 입력란을 확인하세요.');
                }
                else {

                    if(max > min ) {	//max값 검증

                        if(min >= 0) {

                            var pointStore = Ext.getStore('Point');
                            var point = Ext.create('GFManager.model.Point');

                            point.set('id', savePoint.id);
                            point.set('name', savePoint.name);
                            point.set('description', savePoint.description);
                            point.set('min', savePoint.min);
                            point.set('max', savePoint.max);
                            point.set('icon', savePoint.icon);

                            pointStore.add(point);
                            pointStore.save();
                            pointStore.commitChanges();

                            pointEditTab.close();

                            Ext.toast({
                                title: 'Point-추가',
                                html: '새로운 Point ('+ savePoint.name+ ') 가 성공적으로 추가되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onSaveError('필수 입력란을 확인하세요.');
                        }

                    } else {
                        me.onSaveError('max > min');
                    }
                }

            } else {
                me.onSaveError();
            }

        } else {
            var max = pointEditTab.getViewModel().get('thePoint').get('max');
            var min = pointEditTab.getViewModel().get('thePoint').get('min');

            if(savePoint.dirty) { 				//기존 Point 정보 변경시
                if(pointEditTab.isValid()) {	//기존 Point 정보 검증

                    Ext.MessageBox.confirm('Point-저장', savePoint.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            savePoint.save();

                            Ext.toast({
                                title: 'Point-수정' ,
                                html: savePoint.get('name') + '의 정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {

                            me.onCancelPoint();
                        }
                    });


                } else {
                    me.onSaveError();
                }
            }
        }
    },

    onPointCancelButtonClick: function(button, e, eOpts) {
        this.onCancelPoint();
    },

    onPointIDTextfieldBeforeRender: function(component, eOpts) {
        var pointIDCmp		= this.lookupReference('pointID');
        var isCreatePoint	= this.getViewModel().get('thePoint').create;

        if(isCreatePoint) {
            pointIDCmp.setDisabled(false);
        } else {
            pointIDCmp.setDisabled(true);
        }
    },

    onDataviewPointItemClick: function(dataview, record, item, index, e, eOpts) {
        this.getViewModel().set('thePoint.icon', record.getData().icon);

    },

    onDataviewPointAfterRender: function(component, eOpts) {
        this.onSelectedPointIcon(component);
    },

    onPointFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'point_edittab') {

        } else {

            if(!this.getViewModel().data.thePoint.dropped) {
                var point		= this.getViewModel().get('thePoint');

                var isDirtyPoint	= point.dirty;
                var isCreatePoint	= point.create;
                var me = this;

                if(isDirtyPoint)  {

                    Ext.MessageBox.confirm('Point-저장', point.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            point.save();

                            Ext.toast({
                                title: 'Point-수정 완료' ,
                                html: point.get('name') + '의 Point정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelPoint();
                        }
                    });
                }
            }
        }
    }

});
