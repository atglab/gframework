/*
 * File: app/view/manager/permission/PermissionEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.permission.PermissionEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.permissionedit',

    onCancelPermission: function() {
        var permission	= this.getViewModel().get('thePermission');
        var me			= this;

        if(!permission.dirty)  {

        } else {
            if(!permission.create) {

                Ext.getStore('Permission').rejectChanges();


                var method_radiogroup		= this.lookupReference('getMethod');



                var pointComboBox 			= this.lookupReference('pointComboBox');
                var pointMax 				= this.lookupReference('pointMax');
                var maxPointDisplayField	= this.lookupReference('maxPointDisplayField');


                var levelComboBox 			= this.lookupReference('levelComboBox');
                var levelMax 				= this.lookupReference('levelMax');
                var maxLevelDisplayField	= this.lookupReference('maxLevelDisplayField');


                var statusComboBox 			= this.lookupReference('statusComboBox');
                var subStatusComboBox		= this.lookupReference('subStatusComboBox');


                var permission				= this.getViewModel().get('thePermission');
                var get_method 				= this.getViewModel().get('thePermission').get('relation_method');
                var get_object				= this.getViewModel().get('thePermission').get('relation_object');
                var get_parameter			= this.getViewModel().get('thePermission').get('get_parameter');


                //획득방식에 따른 Radio버튼 위치 및 획득 Object 설정
                if(get_method == 'basic_type') {			//획득방식이 기본일 경우,

                    method_radiogroup.items.items[0].items.items[0].setValue(true);

                    pointComboBox.setDisabled(true);
                    pointMax.setDisabled(true);
                    maxPointDisplayField.setDisabled(true);

                    levelComboBox.setDisabled(true);
                    levelMax.setDisabled(true);
                    maxLevelDisplayField.setDisabled(true);

                    statusComboBox.setDisabled(true);
                    subStatusComboBox.setDisabled(true);

                } else if(get_method == 'point_type') {		//획득방식이 point일 경우,

                    method_radiogroup.items.items[1].items.items[0].setValue(true);

                    pointComboBox.setDisabled(false);
                    pointMax.setDisabled(false);
                    maxPointDisplayField.setDisabled(false);

                    levelComboBox.setDisabled(true);
                    levelMax.setDisabled(true);
                    maxLevelDisplayField.setDisabled(true);

                    statusComboBox.setDisabled(true);
                    subStatusComboBox.setDisabled(true);

                    pointComboBox.setValue(get_object);
                    pointMax.setValue(get_parameter);
                    pointMax.setMaxValue(get_parameter);



                } else if(get_method == 'level_type') {		//획득방식이 level 경우,

                    method_radiogroup.items.items[2].items.items[0].setValue(true);

                    pointComboBox.setDisabled(true);
                    pointMax.setDisabled(true);
                    maxPointDisplayField.setDisabled(true);

                    levelComboBox.setDisabled(false);
                    levelMax.setDisabled(false);
                    maxLevelDisplayField.setDisabled(false);

                    statusComboBox.setDisabled(true);
                    subStatusComboBox.setDisabled(true);

                    levelComboBox.setValue(get_object);
                    levelMax.setValue(get_parameter);
                    levelMax.setMaxValue(get_parameter);

                } else if(get_method == 'status_type') {	//획득방식이 status일 경우,

                    method_radiogroup.items.items[3].items.items[0].setValue(true);

                    pointComboBox.setDisabled(true);
                    pointMax.setDisabled(true);
                    maxPointDisplayField.setDisabled(true);

                    levelComboBox.setDisabled(true);
                    levelMax.setDisabled(true);
                    maxLevelDisplayField.setDisabled(true);

                    statusComboBox.setDisabled(false);
                    subStatusComboBox.setDisabled(false);


                    var statusRecord		= me.onFindNameInStore('Status', get_object, 'id');

                    var StatusClassStore = Ext.getStore('StatusClass');
                    var mydata = statusRecord.get('classes');
                    StatusClassStore.loadData(mydata, false);

                    statusComboBox.setValue(statusRecord.get('id'));
                    subStatusComboBox.setValue(statusRecord.get('classes')[get_parameter-1].name);


                } else {									//획득방식이 mission일 경우,

                    method_radiogroup.items.items[4].items.items[0].setValue(true);

                }

            }


        }
    },

    onFindNameInStore: function(storeName, findId, recordName) {
        var store 		= Ext.getStore(storeName);
        var findRecord	= store.findRecord(recordName, findId);
        return findRecord;
    },

    onPermissionSaveButtonClick: function(button, e, eOpts) {
        var permissionEditTab = button.up('permissionedit');
        var me = this;

        var savePermission = permissionEditTab.getViewModel().get('thePermission');

        if(savePermission.create) {		//새로운 User 추가시
            if(permissionEditTab.isValid()) {

                if(!savePermission.id || !savePermission.name || !savePermission.description ) {

                    Ext.toast({
                        title: 'Permission-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });

                } else {

                    var permissionStore	= Ext.getStore('Permission');
                    var permission 		= Ext.create('GFManager.model.Permission');

                    permission.set('id', savePermission.id);
                    permission.set('name', savePermission.name);
                    permission.set('description', savePermission.description);

                    permission.set('user_category', savePermission.user_category);


                    var method_radiogroup = this.lookupReference('getMethod');
                    var seletedMethod;
                    var seletedObject;
                    var setParameter;

                    if(method_radiogroup.items.items[0].items.items[0].value) { 		//basic
                        seletedMethod = 'basic_type';
                    } else if(method_radiogroup.items.items[1].items.items[0].value) { 	//point

                        seletedMethod	= 'point_type';
                        seletedObject	= this.lookupReference('pointComboBox').value;
                        setParameter	= this.lookupReference('pointMax').value;


                    } else if(method_radiogroup.items.items[2].items.items[0].value) { 	//level

                        seletedMethod = 'level_type';
                        seletedObject	= this.lookupReference('levelComboBox').value;
                        setParameter	= this.lookupReference('levelMax').value;


                    } else if(method_radiogroup.items.items[3].items.items[0].value) { 	//status

                        seletedMethod = 'status_type';
                        seletedObject	= this.lookupReference('statusComboBox').value;
                        setParameter	= this.lookupReference('subStatusComboBox').value;

                    } else if(method_radiogroup.items.items[4].items.items[0].value) { 	//mission

                        seletedMethod = 'mission_type';
                    }

                    permission.set('relation_method', seletedMethod);
                    permission.set('relation_object', seletedObject);
                    permission.set('get_parameter', setParameter);


                    permissionStore.add(permission);
                    permissionStore.save();
                    permissionStore.commitChanges();

                    permissionEditTab.close();

                    Ext.toast({
                        title: 'Permission-추가',
                        html: '새로운 Permission ('+ savePermission.name+ ') 가 성공적으로 추가되었습니다.',
                        align: 't',
                        bodyPadding:10
                    });
                }
            } else {
                Ext.toast({
                    title: 'Permission-저장 실패' ,
                    html: '필드값을 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });
            }

        } else {

            if(savePermission.dirty) { 	//change editTab
                if(permissionEditTab.isValid()) {


                    if(!savePermission.get('id') || !savePermission.get('name') || !savePermission.get('description') ||
                    !savePermission.get('relation_object') || !savePermission.get('relation_object') || !savePermission.get('get_parameter')) {
                        Ext.toast({
                            title: 'Permission-저장 실패' ,
                            html: '필드값을 다시 확인해주세요.',
                            align: 't',
                            bodyPadding:10
                        });
                    } else {

                        Ext.MessageBox.confirm('Permission-저장', savePermission.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                            if (btn == 'yes') {

                                savePermission.save();

                                Ext.toast({
                                    title: 'Permission-수정 완료' ,
                                    html: savePermission.get('name') + '의 Permission정보가 성공적으로 수정되었습니다.',
                                    align: 't',
                                    bodyPadding:10
                                });

                            } else {

                                me.onCancelPermission();

                            }
                        });

                    }

                } else {
                    Ext.toast({
                        title: 'Permission-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                }
            }
        }
    },

    onPermissionCancelButtonClick: function(button, e, eOpts) {
        this.onCancelPermission();
    },

    onPermissionIDTextfieldBeforeRender: function(component, eOpts) {
        var permissionID_textfield	= this.lookupReference('permissionID');

        if(this.getViewModel().get('thePermission').create) {

            permissionID_textfield.setDisabled(false);

        } else {

            permissionID_textfield.setDisabled(true);

        }
    },

    onPermissionPointComboboxSelect: function(combo, record, eOpts) {
        var pointMax = this.lookupReference('pointMax');
        var maxValue = record.get('max');
        pointMax.setValue(maxValue);
        pointMax.setMaxValue(maxValue);


        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
        } else {
            var seletedPointID = record.get('id');
            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('relation_object', seletedPointID);

        }
    },

    onPermissionPointNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
        } else {
            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('get_parameter', newValue);
        }
    },

    onPermissionLevelComboboxSelect: function(combo, record, eOpts) {
        var levelMax = this.lookupReference('levelMax');
        var maxValue = record.get('max');

        levelMax.setValue(maxValue);
        levelMax.setMaxValue(maxValue);


        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
            combo.setValue(record.get('id'));
        } else {

            var seletedLevelID = record.get('id');
            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('relation_object', seletedLevelID);

        }
    },

    onPermissionLevelfieldChange: function(field, newValue, oldValue, eOpts) {
        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
        } else {

            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('get_parameter', newValue);

        }
    },

    onPermissionStatusComboboxSelect: function(combo, record, eOpts) {
        var StatusClassStore = Ext.getStore('StatusClass');
        var mydata = record.get('classes');
        StatusClassStore.loadRawData(mydata, false);


        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
        } else {
            var seletedStatusID	= record.get('id');
            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('relation_object', seletedStatusID);
        }
    },

    onPermissionSubStatusComboboxSelect: function(combo, record, eOpts) {
        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        if(isCreatedPermission) {
        } else {
            var seletedStatusClassRank	= record.get('rank');
            var get_object		= this.getViewModel().get('thePermission');
            get_object.set('get_parameter', seletedStatusClassRank);
        }

    },

    onPermissionRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        var isCreatedPermission = this.getViewModel().get('thePermission').create;

        var radioPosition 			= newValue.method;


        var method_radiogroup 		= this.lookupReference('getMethod');

        var pointComboBox 			= this.lookupReference('pointComboBox');
        var pointMax 				= this.lookupReference('pointMax');
        var maxPointDisplayField	= this.lookupReference('maxPointDisplayField');


        var levelComboBox 			= this.lookupReference('levelComboBox');
        var levelMax 				= this.lookupReference('levelMax');
        var maxLevelDisplayField	= this.lookupReference('maxLevelDisplayField');


        var statusComboBox 			= this.lookupReference('statusComboBox');
        var subStatusComboBox		= this.lookupReference('subStatusComboBox');

        var me = this;


        if(isCreatedPermission) {		//새로운 Permission 추가시

            if(radioPosition == 'basic_type') {			//획득방식이 기본일 경우,

                method_radiogroup.items.items[0].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);


            } else if(radioPosition == 'point_type') {	//획득방식이 point일 경우,

                method_radiogroup.items.items[1].items.items[0].setValue(true);

                pointComboBox.setDisabled(false);
                pointMax.setDisabled(false);
                maxPointDisplayField.setDisabled(false);



                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);


            } else if(radioPosition == 'level_type') {	//획득방식이 level 경우,

                method_radiogroup.items.items[2].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(false);
                levelMax.setDisabled(false);
                maxLevelDisplayField.setDisabled(false);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);


            } else if(radioPosition == 'status_type') {	//획득방식이 status일 경우,

                method_radiogroup.items.items[3].items.items[0].setValue(true);


                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(false);
                subStatusComboBox.setDisabled(false);

            } else {									//획득방식이 mission일 경우,

                method_radiogroup.items.items[4].items.items[0].setValue(true);


                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);

            }

        } else {

            var get_object				= this.getViewModel().get('thePermission').get('relation_object');
            var get_parameter			= this.getViewModel().get('thePermission').get('get_parameter');

            var permission		= this.getViewModel().get('thePermission');


            //획득방식에 따른 Radio버튼 위치 및 비활성화 모듈
            if(radioPosition == 'basic_type') {			//획득방식이 기본일 경우,

                method_radiogroup.items.items[0].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);




            } else if(radioPosition == 'point_type') {	//획득방식이 point일 경우,

                method_radiogroup.items.items[1].items.items[0].setValue(true);

                pointComboBox.setDisabled(false);
                pointMax.setDisabled(false);
                maxPointDisplayField.setDisabled(false);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);

                /*
                pointComboBox.setValue(get_object);
                pointMax.setValue(get_parameter);
                pointMax.setMaxValue(get_parameter);*/




            } else if(radioPosition == 'level_type') {	//획득방식이 level 경우,

                method_radiogroup.items.items[2].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(false);
                levelMax.setDisabled(false);
                maxLevelDisplayField.setDisabled(false);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);

                /*
                levelComboBox.setValue(get_object);
                levelMax.setValue(get_parameter);
                levelMax.setMaxValue(get_parameter);*/

            } else if(radioPosition == 'status_type') {	//획득방식이 status일 경우,

                method_radiogroup.items.items[3].items.items[0].setValue(true);


                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(false);
                subStatusComboBox.setDisabled(false);



                /*

                var statusRecord		= me.onFindNameInStore('Status', get_object, 'id');

                var StatusClassStore = Ext.getStore('StatusClass');
                var mydata = statusRecord.get('classes');
                StatusClassStore.loadData(mydata, false);


                statusComboBox.setValue(statusRecord.get('id'));
                subStatusComboBox.setValue(statusRecord.get('classes')[get_parameter-1].name);*/
            } else {									//획득방식이 mission일 경우,

                method_radiogroup.items.items[4].items.items[0].setValue(true);


                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);

            }


            permission.set('relation_method', radioPosition);
            //permission.set('relation_object', '');
            //permission.set('get_parameter', '');
        }
    },

    onPermissionRadiogroupBeforeRender: function(component, eOpts) {
        var isCreatePermission = this.getViewModel().get('thePermission').create;

        var me = this;

        //획득방식 init
        var method_radiogroup		= this.lookupReference('getMethod');



        var pointComboBox 			= this.lookupReference('pointComboBox');
        var pointMax 				= this.lookupReference('pointMax');
        var maxPointDisplayField	= this.lookupReference('maxPointDisplayField');


        var levelComboBox 			= this.lookupReference('levelComboBox');
        var levelMax 				= this.lookupReference('levelMax');
        var maxLevelDisplayField	= this.lookupReference('maxLevelDisplayField');


        var statusComboBox 			= this.lookupReference('statusComboBox');
        var subStatusComboBox		= this.lookupReference('subStatusComboBox');


        if(isCreatePermission) {		//새로운 Permission 추가시

            method_radiogroup.items.items[0].items.items[0].setValue(true);

            pointComboBox.setDisabled(true);
            pointMax.setDisabled(true);
            maxPointDisplayField.setDisabled(true);

            levelComboBox.setDisabled(true);
            levelMax.setDisabled(true);
            maxLevelDisplayField.setDisabled(true);

            statusComboBox.setDisabled(true);
            subStatusComboBox.setDisabled(true);

        } else {


            var get_method 				= this.getViewModel().get('thePermission').get('relation_method');
            var get_object				= this.getViewModel().get('thePermission').get('relation_object');
            var get_parameter			= this.getViewModel().get('thePermission').get('get_parameter');

            //획득방식에 따른 Radio버튼 위치 및 획득 Object 설정
            if(get_method == 'basic_type') {			//획득방식이 기본일 경우,

                method_radiogroup.items.items[0].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);

            } else if(get_method == 'point_type') {		//획득방식이 point일 경우,

                method_radiogroup.items.items[1].items.items[0].setValue(true);

                pointComboBox.setDisabled(false);
                pointMax.setDisabled(false);
                maxPointDisplayField.setDisabled(false);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);


                /*var pointRecord = me.onFindNameInStore('Point', get_object, 'id');

                var pointComboBox		= this.lookupReference('pointComboBox');
                var pointMax			= this.lookupReference('pointMax');


                pointComboBox.setValue(pointRecord.get('name'));
                pointMax.setValue(get_parameter);
                pointMax.setMaxValue(get_parameter);*/

                pointComboBox.setValue(get_object);
                pointMax.setValue(get_parameter);
                pointMax.setMaxValue(get_parameter);



            } else if(get_method == 'level_type') {		//획득방식이 level 경우,

                method_radiogroup.items.items[2].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(false);
                levelMax.setDisabled(false);
                maxLevelDisplayField.setDisabled(false);

                statusComboBox.setDisabled(true);
                subStatusComboBox.setDisabled(true);


                /* var levelRecord = me.onFindNameInStore('Level', get_object, 'id');

                var levelComboBox		= this.lookupReference('levelComboBox');
                var levelMax			= this.lookupReference('levelMax');

                levelComboBox.setValue(levelRecord.get('name'));
                levelMax.setValue(get_parameter);
                levelMax.setMaxValue(get_parameter);*/


                levelComboBox.setValue(get_object);
                levelMax.setValue(get_parameter);
                levelMax.setMaxValue(get_parameter);

            } else if(get_method == 'status_type') {	//획득방식이 status일 경우,

                method_radiogroup.items.items[3].items.items[0].setValue(true);

                pointComboBox.setDisabled(true);
                pointMax.setDisabled(true);
                maxPointDisplayField.setDisabled(true);

                levelComboBox.setDisabled(true);
                levelMax.setDisabled(true);
                maxLevelDisplayField.setDisabled(true);

                statusComboBox.setDisabled(false);
                subStatusComboBox.setDisabled(false);


                var statusRecord		= me.onFindNameInStore('Status', get_object, 'id');

                var StatusClassStore = Ext.getStore('StatusClass');
                var mydata = statusRecord.get('classes');
                StatusClassStore.loadData(mydata, false);


                var statusComboBox			= this.lookupReference('statusComboBox');
                var subStatusComboBox		= this.lookupReference('subStatusComboBox');
                statusComboBox.setValue(statusRecord.get('name'));
                subStatusComboBox.setValue(statusRecord.get('classes')[get_parameter-1].name);


            } else {									//획득방식이 mission일 경우,

                method_radiogroup.items.items[4].items.items[0].setValue(true);

            }



        }

    },

    onPermissionFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'permission_edittab') {

        } else {
            if(!this.getViewModel().data.thePermission.dropped) {
                var permission		= this.getViewModel().get('thePermission');

                var isDirtyPermission	= permission.dirty;
                var isCreatePermission	= permission.create;
                var me = this;

                //console.log(permission);

                if(isDirtyPermission)  {

                    console.log(permission);


                    Ext.MessageBox.confirm('Permission-저장', permission.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            permission.save();

                            Ext.toast({
                                title: 'Permission-수정 완료' ,
                                html: permission.get('name') + '의 Permission정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelPermission();
                        }
                    });
                }
            }
        }
    }

});
