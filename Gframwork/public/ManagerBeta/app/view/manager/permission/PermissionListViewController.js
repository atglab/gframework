/*
 * File: app/view/manager/permission/PermissionListViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.permission.PermissionListViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.permissionlist',

    viewPermission: function(record) {
        this.fireViewEvent('viewPermission', this.getView(), record);
    },

    onPermissionAddButtonClick: function(button, e, eOpts) {
        this.viewPermission(null);
    },

    onPermissionDelButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var PermissionGrid = button.up('permissionlist');
            var selection = PermissionGrid.getSelectionModel().getSelection()[0];
            selection.erase();

            this.viewPermission(selection);

            button.disable();


        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    onPermissionlistviewSelectionChange: function(model, selected, eOpts) {
        var delBtn = this.lookupReference('del_permission_btn');
        delBtn.enable();
    },

    onPermissionGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.viewPermission(record);
    }

});
