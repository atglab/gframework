/*
 * File: app/view/manager/activity/ActivityEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.activity.ActivityEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.activityedit',

    onCancelActivity: function() {
        var activity		= this.getViewModel().get('theActivity');

        var isDirtyActivity	= activity.dirty;
        if(isDirtyActivity)  {
            Ext.getStore('Activity').rejectChanges();
        }
    },

    onActivitySaveButtonClick: function(button, e, eOpts) {
        var activityEditTab = button.up('activityedit');
        var me = this;

        var saveActivity = activityEditTab.getViewModel().get('theActivity');

        if(saveActivity.create) {	//Add Activity
            if(activityEditTab.isValid()) {

                if(!saveActivity.id || !saveActivity.name || !saveActivity.description) {
                    Ext.toast({
                        title: 'Activity-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                } else {
                    var activityStore = Ext.getStore('Activity');
                    var activity = Ext.create('GFManager.model.Activity');

                    activity.set('id', saveActivity.id);
                    activity.set('name', saveActivity.name);
                    activity.set('description', saveActivity.description);

                    activityStore.add(activity);
                    activityStore.save();
                    activityStore.commitChanges();

                    activityEditTab.close();

                    Ext.toast({
                        title: 'Activity-추가',
                        html: '새로운 Activity ('+ saveActivity.name+ ') 가 성공적으로 추가되었습니다.',
                        align: 't',
                        bodyPadding:10
                    });
                }

            } else {
                Ext.toast({
                    title: 'Activity-저장 실패' ,
                    html: '필드값을 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });
            }
        } else {							//기존 Activity
            if(saveActivity.dirty) { 		//기존 Activity 정보 변경시
                if(activityEditTab.isValid()) {	//기존 Activity 정보 검증
                    Ext.MessageBox.confirm('Activity-저장', saveActivity.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            saveActivity.save();

                            Ext.toast({
                                title: 'Activity-수정' ,
                                html: saveActivity.get('name') + '의 정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });

                        } else {

                            me.onCancelActivity();

                        }
                    });
                } else {
                    Ext.toast({
                        title: 'User-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                }
            }
        }
    },

    onActivityCancelButtonClick: function(button, e, eOpts) {
        this.onCancelActivity();
    },

    onActivityIDTextfieldBeforeRender: function(component, eOpts) {
        var activityIDCmp	= this.lookupReference('activityID');
        var isCreateActivity= this.getViewModel().get('theActivity').create;

        if(isCreateActivity) {
            activityIDCmp.setDisabled(false);
        } else {
            activityIDCmp.setDisabled(true);
        }
    },

    onActivityFormShow: function(component, eOpts) {
        var isCreatedActivity	= this.getViewModel().get('theActivity').create;
        var activityMissionStore= Ext.getStore('ActivityMission');
        var missionStore		= Ext.getStore('Mission');

        activityMissionStore.loadData('',false);

        if(isCreatedActivity) {
        } else {
            var mydata = this.getViewModel().get('theActivity').get('missions');

            for(i=0 ; i<mydata.length ; i++) {
                var activityMission	= Ext.create('GFManager.model.ActivityMission');
                var missionId 		= mydata[i].missionId;
                var findMission		= missionStore.findRecord('id', missionId);

                activityMission.set('missionId', missionId);
                activityMission.set('missionName', findMission.get('name'));
                activityMissionStore.add(activityMission);
                activityMissionStore.commitChanges();
            }
        }
    },

    onActivityFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'activity_edittab') {

        } else {
            if(!this.getViewModel().data.theActivity.dropped) {
                var activity		= this.getViewModel().get('theActivity');

                var isDirtyActivity	= activity.dirty;
                var isCreateActivity	= activity.create;
                var me = this;

                if(isDirtyActivity)  {

                    Ext.MessageBox.confirm('Activity-저장', activity.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            activity.save();

                            Ext.toast({
                                title: 'Activity-수정 완료' ,
                                html: activity.get('name') + '의 Activity정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelActivity();
                        }
                    });
                }
            }
        }
    }

});
