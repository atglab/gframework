/*
 * File: app/view/manager/mission/MissionEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.mission.MissionEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.missionedit',

    onSetBindStore: function() {
            var reward_type		= this.getViewModel().get('theMission').get('reward_type');


            var rewardOptionField		= this.lookupReference('rewardOptionField');
            var rewardOptionListStatus	= this.lookupReference('rewardOptionListStatus');
            var rewardOptionListLevel	= this.lookupReference('rewardOptionListLevel');


            var rewardListCombo	= this.lookupReference('missionRewardList');
            var store;

            if(reward_type == 'badge_type') {

                store	= Ext.getStore('Badge');

                //=================================
                rewardOptionField.disable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================

            } else if(reward_type == 'point_type') {

                store	= Ext.getStore('Point');

                //=================================
                rewardOptionField.enable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================

            } else if(reward_type == 'level_type') {

                store	= Ext.getStore('Level');

                //=================================
                rewardOptionField.disable();
                rewardOptionField.hide();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.show();
                //=================================

            } else if(reward_type == 'status_type') {

                store	= Ext.getStore('Status');


                //=================================
                rewardOptionField.disable();
                rewardOptionField.hide();
                rewardOptionListStatus.show();
                rewardOptionListLevel.hide();
                //=================================

            } else if(reward_type == 'permission_type') {

                store	= Ext.getStore('Permission');


                //=================================
                rewardOptionField.disable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================

            }

            rewardListCombo.bindStore(store);
    },

    onCancelMission: function() {
        var mission			= this.getViewModel().get('theMission');

        var isDirtyMission	= mission.dirty;

        if(isDirtyMission)  {
            //console.log(mission);
            Ext.getStore('Mission').rejectChanges();
            this.onSetBindStore();
        }
    },

    onMissionSaveButtonClick: function(button, e, eOpts) {
        var missionEditTab = button.up('missionedit');
        var me = this;

        var saveMission = missionEditTab.getViewModel().get('theMission');

        if(saveMission.create) {

            if(missionEditTab.isValid()) {

                if(!saveMission.id || !saveMission.name || !saveMission.description ||
                !saveMission.activityId || !saveMission.reward_type || !saveMission.reward_object ||
                !saveMission.exit_condition || !saveMission.ruleId) {

                    Ext.toast({
                        title: 'Mission-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                } else {

                    var missionStore	= Ext.getStore('Mission');
                    var mission 		= Ext.create('GFManager.model.Mission');

                    mission.set('id', saveMission.id);
                    mission.set('name', saveMission.name);
                    mission.set('description', saveMission.description);

                    mission.set('activityId', saveMission.activityId);
                    mission.set('reward_type', saveMission.reward_type);
                    mission.set('reward_object', saveMission.reward_object);

                    if(saveMission.reward_type == 'badge_type' || saveMission.reward_type == 'permission_type') {
                        mission.set('reward_parameter', 1);
                    } else {
                        mission.set('reward_parameter', saveMission.reward_parameter);
                    }


                    mission.set('exit_condition', saveMission.exit_condition);
                    mission.set('ruleId', saveMission.ruleId);
                    mission.set('start_date', saveMission.start_date);
                    mission.set('end_date', saveMission.end_date);
                    mission.set('useExpiration', saveMission.useExpiration);
                    mission.set('isContinuous', saveMission.isContinuous);
                    mission.set('constraint_period', saveMission.constraint_period);
                    mission.set('useConstraint', saveMission.useConstraint);
                    mission.set('max_repeat_count', saveMission.max_repeat_count);
                    mission.set('repeat_period', saveMission.repeat_period);
                    mission.set('isRepeatable', saveMission.isRepeatable);


                    missionStore.add(mission);
                    missionStore.save();
                    missionStore.commitChanges();

                    missionEditTab.close();

                    Ext.toast({
                        title: 'Mission-추가',
                        html: '새로운 Mission ('+ saveMission.name+ ') 가 성공적으로 추가되었습니다.',
                        align: 't',
                        bodyPadding:10
                    });
                }

            } else {
                Ext.toast({
                    title: 'Mission-저장 실패' ,
                    html: '필드값을 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });
            }



        } else {

            if(saveMission.dirty) { 	//change editTab

                if(missionEditTab.isValid()) {

                    if(!saveMission.get('name') || !saveMission.get('description') ||
                    !saveMission.get('activityId') || !saveMission.get('reward_type') ||
                    !saveMission.get('reward_object') || !saveMission.get('exit_condition') || !saveMission.get('ruleId')) {

                        Ext.toast({
                            title: 'Mission-저장 실패' ,
                            html: '필드값을 다시 확인해주세요.',
                            align: 't',
                            bodyPadding:10
                        });
                    } else {
                        Ext.MessageBox.confirm('Mission-저장', saveMission.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                            if (btn == 'yes') {

                                saveMission.save();

                                Ext.toast({
                                    title: 'Mission-수정 완료' ,
                                    html: saveMission.get('name') + '의 Mission정보가 성공적으로 수정되었습니다.',
                                    align: 't',
                                    bodyPadding:10
                                });

                            } else {

                                me.onCancelMission();

                            }
                        });

                    }



                } else {
                    Ext.toast({
                        title: 'Mission-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                }

            }

        }
    },

    onMissionCancelButtonClick: function(button, e, eOpts) {
        this.onCancelMission();
    },

    onMissionIdTextfieldBeforeRender: function(component, eOpts) {
        var missionId	= this.lookupReference('missionId');

        if(this.getViewModel().get('theMission').create) {

            missionId.setDisabled(false);

        } else {

            missionId.setDisabled(true);

        }
    },

    onMissionRewardTypeComboboxSelect: function(combo, record, eOpts) {
        var missionRewardList		= this.lookupReference('missionRewardList');
        var seletedRewardTypeName	= record.get('name');
        var seletedRewardTypeID		= record.get('id');
        var store					= Ext.getStore(seletedRewardTypeName);

        missionRewardList.bindStore(store);
        missionRewardList.setValue('');
        missionRewardList.setDisabled(false);


        //var rewardObject	= this.getViewModel().get('theMission').get('reward_object');

        var rewardOptionField		= this.lookupReference('rewardOptionField');
        var rewardOptionListStatus	= this.lookupReference('rewardOptionListStatus');
        var rewardOptionListLevel	= this.lookupReference('rewardOptionListLevel');


        if(seletedRewardTypeID == 'badge_type') {

            //=================================
            rewardOptionField.disable();
            rewardOptionField.show();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.hide();
            //=================================

        } else if(seletedRewardTypeID == 'point_type') {

            //=================================
            rewardOptionField.enable();
            rewardOptionField.show();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.hide();
            //=================================

        } else if(seletedRewardTypeID == 'level_type') {


            //=================================
            rewardOptionField.disable();
            rewardOptionField.hide();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.show();
            //=================================

        } else if(seletedRewardTypeID == 'status_type') {



            //=================================
            rewardOptionField.disable();
            rewardOptionField.hide();
            rewardOptionListStatus.show();
            rewardOptionListLevel.hide();
            //=================================

        } else if(seletedRewardTypeID == 'permission_type') {

            //=================================
            rewardOptionField.disable();
            rewardOptionField.show();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.hide();
            //=================================
        }
    },

    onMissionRewardBeforeRender: function(component, eOpts) {
        var isCreatedMission		= this.getViewModel().get('theMission').create;

        var missionRewardList		= this.lookupReference('missionRewardList');


        var rewardOptionField		= this.lookupReference('rewardOptionField');
        var rewardOptionListStatus	= this.lookupReference('rewardOptionListStatus');
        var rewardOptionListLevel	= this.lookupReference('rewardOptionListLevel');


        var isContinuous			= this.lookupReference('isContinuous');
        var constraintPeriod		= this.lookupReference('constraintPeriod');
        var repeatCount				= this.lookupReference('repeatCount');
        var repeatPeriod			= this.lookupReference('repeatPeriod');


        var EndDateField			= this.lookupReference('EndDateField');
        var StartDateField			= this.lookupReference('StartDateField');



        if(isCreatedMission) {

            missionRewardList.setDisabled(true);

            rewardOptionField.disable();
            rewardOptionField.show();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.hide();


            isContinuous.disable();
            constraintPeriod.disable();
            repeatCount.disable();
            repeatPeriod.disable();

            EndDateField.disable();
            StartDateField.disable();


        } else {

            var rewardType 		= this.getViewModel().get('theMission').get('reward_type');
            var rewardObject	= this.getViewModel().get('theMission').get('reward_object');

            var rewardListStore;
            var rewardOptionStore;

            var findResult;
            var data;


            if(rewardType == 'badge_type') {

                rewardListStore	= Ext.getStore('Badge');

                //=================================
                rewardOptionField.disable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================

            } else if(rewardType == 'point_type') {

                rewardListStore	= Ext.getStore('Point');

                //=================================
                rewardOptionField.enable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================

            } else if(rewardType == 'level_type') {

                rewardListStore	= Ext.getStore('Level');

                //=================================
                rewardOptionField.hide();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.show();
                //=================================


            } else if(rewardType == 'status_type') {

                rewardListStore	= Ext.getStore('Status');

                //=================================
                rewardOptionField.hide();
                rewardOptionListStatus.show();
                rewardOptionListLevel.hide();
                //=================================

            } else if(rewardType == 'permission_type') {

                rewardListStore	= Ext.getStore('Permission');

                //=================================
                rewardOptionField.disable();
                rewardOptionField.show();
                rewardOptionListStatus.hide();
                rewardOptionListLevel.hide();
                //=================================
            }

            missionRewardList.bindStore(rewardListStore);
        }
    },

    onComboboxSelect: function(combo, record, eOpts) {
        var storeType 			= record.store.storeId;

        var seletedRewardObject	= record.get('id');
        var store;
        var findResult;
        var data;


        var rewardOptionField		= this.lookupReference('rewardOptionField');
        var rewardOptionListStatus	= this.lookupReference('rewardOptionListStatus');
        var rewardOptionListLevel	= this.lookupReference('rewardOptionListLevel');


        if(storeType == 'Level') {

            //=================================
            rewardOptionField.hide();
            rewardOptionListStatus.hide();
            rewardOptionListLevel.show();
            rewardOptionListLevel.setValue('');
            //=================================

            store 		= Ext.getStore('Level');
            findResult	= store.findRecord('id', seletedRewardObject);
            data		= findResult.get('level_table');
            Ext.getStore('LevelEntity').loadRawData(data, false);


        } else if(storeType == 'Status') {

            //=================================
            rewardOptionField.hide();
            rewardOptionListStatus.show();
            rewardOptionListLevel.hide();
            rewardOptionListStatus.setValue('');
            //=================================

            store 		= Ext.getStore('Status');
            findResult	= store.findRecord('id', seletedRewardObject);
            data		= findResult.get('classes');
            Ext.getStore('StatusClass').loadRawData(data, false);

        }
    },

    onRewardOptionListLevelComboboxExpand: function(field, eOpts) {
        var rewardListStore		= Ext.getStore('Level');
        var rewardOptionStore	= Ext.getStore('LevelEntity');
        rewardOptionStore.loadData('',false);


        var isMissionCreate	= this.getViewModel().get('theMission').create;

        if(!isMissionCreate) {
            var rewardObject		= this.getViewModel().get('theMission').get('reward_object');
            var findResult			= rewardListStore.findRecord('id', rewardObject);
            if(findResult !== null) {
                var data 			= findResult.get('level_table');
                rewardOptionStore.loadData(data, false);
            }
        }
    },

    onRewardOptionListStatusComboboxExpand: function(field, eOpts) {
        var rewardListStore		= Ext.getStore('Status');
        var rewardOptionStore	= Ext.getStore('StatusClass');
        rewardOptionStore.loadData('',false);


        var isMissionCreate	= this.getViewModel().get('theMission').create;

        if(!isMissionCreate) {
            var rewardObject		= this.getViewModel().get('theMission').get('reward_object');
            var findResult			= rewardListStore.findRecord('id', rewardObject);
            if(findResult !== null) {
                var data 			= findResult.get('classes');
                rewardOptionStore.loadData(data, false);
            }
        }
    },

    onMissionFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'mission_edittab') {

        } else {
            if(!this.getViewModel().data.theMission.dropped) {
                var mission		= this.getViewModel().get('theMission');

                var isDirtyMission	= mission.dirty;
                var isCreateMission	= mission.create;
                var me = this;

                if(isDirtyMission)  {

                    Ext.MessageBox.confirm('Mission-저장', mission.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            mission.save();

                            Ext.toast({
                                title: 'Mission-수정 완료' ,
                                html: mission.get('name') + '의 Mission정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelMission();
                        }
                    });
                }
            }
        }
    }

});
