/*
 * File: app/view/manager/status/StatusEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.status.StatusEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.statustedit',

    errorMsg: function() {
            Ext.toast({
                title: '저장 실패' ,
                html: '필드값을 다시 확인해주세요.',
                align: 't',
                bodyPadding:10
            });
    },

    onCancelStatus: function() {
        var isDirtyStatus = this.getViewModel().get('theStatus').dirty;
        var isStatusClass = Ext.getStore('StatusClass').getModifiedRecords().length;
        var isStatusClassR= Ext.getStore('StatusClass').getRemovedRecords().length;

        if(!this.getViewModel().get('theStatus').create) {


            if(!isDirtyStatus)  {

                if(isStatusClass || isStatusClassR) {
                    var statusClassesStore = Ext.getStore('StatusClass');
                    statusClassesStore.rejectChanges();
                    console.log('aaa');


                    var mydata = this.getViewModel().get('theStatus').get('classes');
                    statusClassesStore.loadRawData(mydata, false);
                }


            } else {

                var modifiedData = this.getViewModel().get('theStatus').modified;

                var isName 			= modifiedData.name;
                var isDescription	= modifiedData.description;
                var isGetMethod		= modifiedData.relation_method;
                var isGetObject		= modifiedData.relation_object;
                var isClasses		= modifiedData.classes;


                var me = this;

                if(isName) {
                    this.getViewModel().get('theStatus').set('name', isName);
                }

                if(isDescription) {
                    this.getViewModel().get('theStatus').set('description', isDescription);
                }


                if(isGetMethod || isGetObject) {

                    var identifiedMethod;
                    var identifiedObject;

                    var method_radiogroup	= this.lookupReference('relation_method');
                    var factor_combobox		= this.lookupReference('relation_factor');

                    if(isGetMethod) {

                        this.getViewModel().get('theStatus').set('relation_method', isGetMethod);
                        identifiedMethod	= isGetMethod;
                        identifiedObject	= this.getViewModel().get('theStatus').get('relation_object');
                    }

                    if(isGetObject) {

                        this.getViewModel().get('theStatus').set('relation_object', isGetObject);
                        identifiedMethod	= this.getViewModel().get('theStatus').get('relation_method');
                        identifiedObject	= isGetObject;

                    }

                    if(identifiedMethod == 'point_type') {

                        method_radiogroup.items.items[0].setValue(true);

                        var pointRecord = me.onFindNameInStore('Point', identifiedObject, 'id');

                        if(pointRecord !== null) {
                            factor_combobox.setValue(pointRecord.get('name'));
                        }


                    } else if(identifiedMethod == 'level_type') {

                        method_radiogroup.items.items[1].setValue(true);

                        var levelRecord = me.onFindNameInStore('Level', identifiedObject, 'id');

                        if(levelRecord !== null) {
                            factor_combobox.setValue(levelRecord.get('name'));
                        }

                    } else if(identifiedMethod == 'mission_type') {

                        method_radiogroup.items.items[2].setValue(true);

                        var missionRecord = me.onFindNameInStore('Mission', identifiedObject, 'id');

                        if(missionRecord !== null) {
                            factor_combobox.setValue(missionRecord.get('name'));
                        }
                    }



                    if(identifiedObject !== 'mission_id') {

                        var isCondition = this.lookupReference('condition');

                        isCondition.setEditor({
                            xtype: 'numberfield',
                            allowBlank: false
                        });

                    } else {

                        var isCondition = this.lookupReference('condition');

                        isCondition.setEditor({
                            xtype: 'numberfield',
                            allowBlank: false,
                            editable: false,
                            disabled: true
                        });

                    }


                }

                var statusStore= Ext.getStore('Status');
                statusStore.rejectChanges();



                if(isStatusClass || isStatusClassR) {

                    var statusClassesStore = Ext.getStore('StatusClass');
                    statusClassesStore.rejectChanges();

                    var mydata = this.getViewModel().get('theStatus').get('classes');

                    statusClassesStore.loadRawData(mydata, false);
                }
            }
        }
    },

    onFindNameInStore: function(storeName, findId, recordName) {
        var store 		= Ext.getStore(storeName);
        var findRecord	= store.findRecord(recordName, findId);
        return findRecord;
    },

    onStatusSaveButtonClick: function(button, e, eOpts) {
        var statusEditTab = button.up('statusedit');
        var me = this;


        var saveStatus = statusEditTab.getViewModel().get('theStatus');

        var isStatusClass = Ext.getStore('StatusClass').getModifiedRecords().length;
        var isStatusClassR= Ext.getStore('StatusClass').getRemovedRecords().length;

        var method_radiogroup	= this.lookupReference('relation_method');
        var difficultyCmp 		= this.lookupReference('difficulty');
        var repoStatusCmp		= this.lookupReference('repoStatus_combo');


        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');


        if(saveStatus.create) {
            if(statusEditTab.isValid()) {

                if(!saveStatus.id || !saveStatus.name || !saveStatus.description || !saveStatus.relation_object) {

                    Ext.toast({
                        title: 'Status-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                } else {

                    var statusStore	= Ext.getStore('Status');
                    var status 		= Ext.create('GFManager.model.Status');
                    var relationMethod;


                    status.set('id', saveStatus.id);
                    status.set('name', saveStatus.name);
                    status.set('description', saveStatus.description);

                    if(method_radiogroup.items.items[0].value) {
                        relationMethod = method_radiogroup.items.items[0].inputValue;
                    } else if(method_radiogroup.items.items[1].value) {
                        relationMethod = method_radiogroup.items.items[1].inputValue;
                    } else if(method_radiogroup.items.items[2].value) {
                        relationMethod = method_radiogroup.items.items[2].inputValue;
                    }

                    status.set('relation_method', relationMethod);
                    status.set('relation_object', saveStatus.relation_object);


                    var repoStatusid 	= repoStatusCmp.value;
                    var relationObject	= saveStatus.relation_object;
                    var difficulty		= difficultyCmp.value;



                    var statusClass		 	= Ext.getStore('StatusClass');
                    var ckLoadBtntoStore	= statusClass.data.length;


                    if(ckLoadBtntoStore === 0) {		//불러오기 버튼을 클릭하지 않았다면
                        Ext.toast({
                            title: 'Status-저장 실패' ,
                            html: '불러오기 버튼을 클릭하여 등급표를 완성하고 저장해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                            align: 't',
                            bodyPadding:10
                        });

                    } else {

                        if(repoStatusid && relationMethod && relationObject && difficulty) {	//값이 있으면

                            if(relationObject.indexOf('.') == -1) {							//relation_object검증

                                Ext.Ajax.request({
                                    url: '/api/v1/manager/rewards/statusconditions',
                                    method: 'GET',
                                    headers: {
                                        'x-key': key,
                                        'x-access-token': token
                                    },
                                    params:{
                                        id: repoStatusid,
                                        difficulty: difficulty,
                                        rtype: relationMethod,
                                        rid: relationObject
                                    },
                                    success: function(response){

                                        var decodeResponse 		= Ext.decode(response.responseText);

                                        var statusClassesStore = Ext.getStore('StatusClass');
                                        statusClassesStore.loadData(decodeResponse.data, false);

                                        status.set('classes', decodeResponse.data);

                                        statusStore.add(status);
                                        statusStore.save();
                                        statusStore.commitChanges();

                                        statusEditTab.close();

                                        Ext.toast({
                                            title: 'Status-추가',
                                            html: '새로운 Status ('+ saveStatus.name+ ') 가 성공적으로 추가되었습니다.',
                                            align: 't',
                                            bodyPadding:10
                                        });
                                    },
                                    failure: function(response){console.log(response);}
                                });

                            } else {
                                Ext.toast({
                                    title: 'Status-저장 실패' ,
                                    html: '등급표 필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                                    align: 't',
                                    bodyPadding:10
                                });
                            }
                        } else {			//값이 없으면

                            Ext.toast({
                                title: 'Status-저장 실패' ,
                                html: '등급표 필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                                align: 't',
                                bodyPadding:10
                            });
                        }

                    }




                }
            } else {

                Ext.toast({
                    title: 'Status-저장 실패' ,
                    html: '필드값을 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });
            }





        } else {

            if(saveStatus.dirty || isStatusClass || isStatusClassR) { //change editTab
                if(statusEditTab.isValid()) {

                    if(!saveStatus.get('id') || !saveStatus.get('name') ||
                    !saveStatus.get('description') || !saveStatus.get('relation_object')) {


                        Ext.toast({
                            title: 'Status-저장 실패' ,
                            html: '필드값을 다시 확인해주세요.',
                            align: 't',
                            bodyPadding:10
                        });
                    }
                    else {
                        if(saveStatus.get('relation_object').indexOf('.') != -1) {
                            Ext.toast({
                                title: 'Status-저장 실패' ,
                                html: '필드값을 다시 확인해주세요.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            Ext.MessageBox.confirm('Status-저장', saveStatus.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                                if (btn == 'yes') {

                                    Ext.getStore('StatusClass').save();
                                    Ext.getStore('StatusClass').commitChanges();

                                    saveStatus.save();

                                    Ext.toast({
                                        title: 'Status-수정 완료' ,
                                        html: saveStatus.get('name') + '의 Status정보가 성공적으로 수정되었습니다.',
                                        align: 't',
                                        bodyPadding:10
                                    });

                                } else {
                                    me.onCancelStatus();
                                }
                            });

                        }
                    }

                } else {

                    Ext.toast({
                        title: 'Status-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                }
            }
        }
    },

    onStatusCancelButtonClick: function(button, e, eOpts) {
        this.onCancelStatus();
    },

    onStatusIDTextfieldBeforeRender: function(component, eOpts) {
        var statusID_textfield	= this.lookupReference('statusID');

        if(this.getViewModel().get('theStatus').create) {

            statusID_textfield.setDisabled(false);

        } else {

            statusID_textfield.setDisabled(true);

        }
    },

    onStatusRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        var curPosition = newValue.method;

        var isCreatedStatus = this.getViewModel().get('theStatus').create;
        var method_combobox   = this.lookupReference('relation_factor');
        var store;


        if(isCreatedStatus) {

            if(curPosition == 'point_type') {			//Point
                store	= Ext.getStore('Point');
            } else if(curPosition == 'level_type') {	//Level
                store	= Ext.getStore('Level');
            } else if(curPosition == 'mission_type') {	//Mission
                store	= Ext.getStore('RelationFactor');
            }

            method_combobox.bindStore(store);
            method_combobox.setValue('');
        } else {


            var relation_object	 	= this.getViewModel().get('theStatus').get('relation_object');
            var relation_method 	= this.getViewModel().get('theStatus').get('relation_method');

            if(curPosition == 'point_type') {			//Point

                store	= Ext.getStore('Point');
                method_combobox.bindStore(store);

                if(relation_method == curPosition) {
                    method_combobox.setValue(relation_object);
                } else {
                    method_combobox.setValue('');
                    this.getViewModel().get('theStatus').set('relation_method', 'point_type');
                }

            } else if(curPosition == 'level_type') {	//Level

                store	= Ext.getStore('Level');
                method_combobox.bindStore(store);

                if(relation_method == curPosition) {
                    method_combobox.setValue(relation_object);
                } else {
                    method_combobox.setValue('');
                    this.getViewModel().get('theStatus').set('relation_method', 'level_type');
                }

            } else if(curPosition == 'mission_type') {	//Mission

                store	= Ext.getStore('RelationFactor');
                method_combobox.bindStore(store);

                if(relation_method == curPosition) {
                    method_combobox.setValue(relation_object);
                } else {
                    method_combobox.setValue('');
                    this.getViewModel().get('theStatus').set('relation_method', 'mission_type');
                }
            }
        }
    },

    onStatusRadiogroupBeforeRender: function(component, eOpts) {
        var isCreatedStatus = this.getViewModel().get('theStatus').create;

        var method_radiogroup	= this.lookupReference('relation_method');

        if(isCreatedStatus) {
            method_radiogroup.items.items[0].setValue(true);
        } else {


            var relation_method 	= this.getViewModel().get('theStatus').get('relation_method');

            if(relation_method == 'point_type') {	//Point List

                method_radiogroup.items.items[0].setValue(true);

            } else if(relation_method == 'level_type') {	//Level List

                method_radiogroup.items.items[1].setValue(true);

            } else if(relation_method == 'mission_type') {	//Mission List

                method_radiogroup.items.items[2].setValue(true);

            }

        }
    },

    onRelationFactorComboboxSelect: function(combo, record, eOpts) {
        var selectedRelationFactor = record.get('name');

        if(selectedRelationFactor !== '특정 mission') {

            var isCondition = this.lookupReference('condition');

            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false
            });

        } else {

            var isCondition = this.lookupReference('condition');

            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false,
                editable: false,
                disabled: true
            });

        }
    },

    onStatusLoadButtonClick: function(button, e, eOpts) {
        var statusEditTab		= button.up('statusedit');
        var status 				= statusEditTab.getViewModel().get('theStatus');

        var isCreateStatus		= status.create;
        var difficultyCmp		= this.lookupReference('difficulty');
        var repoStatusCmp		= this.lookupReference('repoStatus_combo');
        var relationMethodCmp	= this.lookupReference('relation_method');



        var repoStatusid;
        var relationMethod;
        var relationObject;
        var difficulty;


        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');




        if(isCreateStatus) {
            var me				= this;

            repoStatusid	= repoStatusCmp.value;

            if(relationMethodCmp.items.items[0].value) {
                relationMethod = 'point_type';
            } else if(relationMethodCmp.items.items[1].value) {
                relationMethod = 'level_type';
            } else if(relationMethodCmp.items.items[2].value) {
                relationMethod = 'mission_type';
            }

            relationObject	= status.relation_object;
            difficulty		= difficultyCmp.value;

            if(repoStatusid && relationMethod && relationObject && difficulty) {	//값이 있으면

                if(relationObject.indexOf('.') == -1) {							//relation_object검증
                    Ext.Ajax.request({
                        url: '/api/v1/manager/rewards/statusconditions',
                        method: 'GET',
                        //{ 'x-key': key, 'x-access-token': token };
                        headers: {
                            'x-key': key,
                            'x-access-token': token
                        },
                        params:{
                            id: repoStatusid,
                            difficulty: difficulty,
                            rtype: relationMethod,
                            rid: relationObject
                        },
                        success: function(response){

                            var decodeResponse 		= Ext.decode(response.responseText);

                            var statusClassesStore = Ext.getStore('StatusClass');
                            statusClassesStore.loadData(decodeResponse.data, false);

                        },
                        failure: function(response){console.log(response);}

                    });
                } else {
                    Ext.toast({
                        title: 'Status-불러오기 실패' ,
                        html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                        align: 't',
                        bodyPadding:10
                    });
                }
            } else {			//값이 없으면

                Ext.toast({
                    title: 'Status-불러오기 실패' ,
                    html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                    align: 't',
                    bodyPadding:10
                });
            }





        } else {

            var me				= this;

            repoStatusid	= repoStatusCmp.value;
            relationMethod	= status.get('relation_method');
            relationObject	= status.get('relation_object');
            difficulty		= difficultyCmp.value;

            if(repoStatusid && relationMethod && relationObject && difficulty) {	//값이 있으면

                if(relationObject.indexOf('.') == -1) {							//relation_object검증

                    Ext.Ajax.request({
                        url: '/api/v1/manager/rewards/statusconditions',
                        method: 'GET',
                        headers: {
                            'x-key': key,
                            'x-access-token': token
                        },
                        params:{
                            id: repoStatusid,
                            difficulty: difficulty,
                            rtype: relationMethod,
                            rid: relationObject
                        },
                        success: function(response){

                            var decodeResponse 		= Ext.decode(response.responseText);
                            var statusClassesStore = Ext.getStore('StatusClass');
                            statusClassesStore.loadData(decodeResponse.data, false);

                            me.getViewModel().get('theStatus').set('classes', decodeResponse.data);

                        },
                        failure: function(response){console.log(response);}
                    });

                } else {
                    Ext.toast({
                        title: 'Status-불러오기 실패' ,
                        html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                        align: 't',
                        bodyPadding:10
                    });
                }
            } else {			//값이 없으면

                Ext.toast({
                    title: 'Status-불러오기 실패' ,
                    html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동 방식, 연동 요소, 등급 및 난이도)',
                    align: 't',
                    bodyPadding:10
                });
            }

        }
    },

    onStatusGridpanelAfterRender: function(component, eOpts) {
        var relationFactorName = this.lookupReference('relation_factor').rawValue;

        if(relationFactorName !== '특정 mission') {

            var isCondition = this.lookupReference('condition');

            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false
            });

        } else {

            var isCondition = this.lookupReference('condition');

            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false,
                editable: false,
                disabled: true
            });
        }
    },

    onStatusFormShow: function(component, eOpts) {
        var isCreatedStatus = this.getViewModel().get('theStatus').create;

        if(isCreatedStatus) {
            var statusClassesStore = Ext.getStore('StatusClass');
            statusClassesStore.loadData('', false);

        } else {

            var statusClassesStore = Ext.getStore('StatusClass');
            var mydata = this.getViewModel().get('theStatus').get('classes');
            statusClassesStore.loadRawData(mydata, false);

        }
    },

    onStatusFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'status_edittab') {

        } else {
            if(!this.getViewModel().data.theStatus.dropped) {
                var status		= this.getViewModel().get('theStatus');
                var isDirtyStatus	= status.dirty;
                var isCreateStatus	= status.create;
                var me = this;

                if(isDirtyStatus)  {
                    Ext.MessageBox.confirm('Status-저장', status.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {
                            status.save();
                            Ext.toast({
                                title: 'Status-수정 완료' ,
                                html: status.get('name') + '의 Status정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelStatus();
                        }
                    });
                }
            }
        }
    }

});
