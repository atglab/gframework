/*
 * File: app/view/manager/main/ManagerMainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.main.ManagerMainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.managermain',

    createTab: function(prefix, record, cfg) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var tabs	= this.lookupReference('maintabeditpanel');
            var id, tab;


            if(record === null) {

                id = prefix + '_edittab';

            } else {

                id = record.get('id');
            }

            tab = tabs.items.getByKey(id);


            if(tab){
                // @TODO: before closing the tab, check to exist any change in the form.
                // so, if some change is detected, display a dialog to ask to a user
                //cfg.itemId = id;
                cfg.closable = true;

                tabs.setActiveTab(tab);

            } else {

                cfg.itemId = id;
                cfg.title = id;
                cfg.closable = true;
                tab = tabs.add(cfg);

                tabs.setActiveTab(tab);

            }
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }


    },

    closeTab: function(id) {
        var tabs = this.lookupReference('maintabeditpanel');
        var tab = tabs.items.getByKey(id);

        if(tab) {
            for(i=0; i<tabs.items.length; i++) {
                var itemId = tabs.items.items[i].itemId;

                if(id == itemId) {
                    tabs.items.items[i].close();
                }
            }
        }
    },

    restartMechanics: function() {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');


            Ext.Ajax.request({
                url: '/api/v1/manager/init/restart',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    if(decodeResponse.success) {
                        Ext.toast({
                            title: '게임 메카닉 로딩' ,
                            html: '새로운 게임 메카닉이 성공적으로 재시작 되었습니다.',
                            align: 't',
                            bodyPadding:10
                        });


                        Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };
                        Ext.getStore('RepoStatus').proxy.headers = { 'x-key': key, 'x-access-token': token };


                        Ext.getStore('User').load();
                        Ext.getStore('Activity').load();
                        Ext.getStore('ActivityMission').load();
                        Ext.getStore('Mission').load();
                        Ext.getStore('Badge').load();
                        Ext.getStore('Point').load();
                        Ext.getStore('Level').load();
                        Ext.getStore('Status').load();
                        Ext.getStore('Permission').load();
                        Ext.getStore('StatusClass').load();
                        Ext.getStore('Rule').load();
                        Ext.getStore('RepoStatus').load();
                    }
                },
                failure: function(response){console.log(response);}
            });
        }




    },

    onResetButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            this.fireViewEvent('tabpanelRemoveAllinManager', this, null);
            this.restartMechanics();
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    onUserTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_user_btn_over');
    },

    onUserTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_user_btn_over');

        } else {

            button.setIconCls('left_menu_user_btn');

        }
    },

    onUserTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_user_btn');
    },

    onGridpanelViewUser: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'useredit',
                viewModel:{
                    data: {
                        theUser: record || {
                            type: 'GFManager.model.User',
                            create: true
                        }
                    }
                }
            };

            this.createTab('user', record, editTab);

        }
    },

    onUserGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('User').load();
        }
    },

    onActivityTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_activity_btn_over');
    },

    onActivityTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_activity_btn_over');

        } else {

            button.setIconCls('left_menu_activity_btn');

        }
    },

    onActivityTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_activity_btn');
    },

    onGridpanelViewActivity: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'activityedit',
                viewModel:{
                    data: {
                        theActivity: record || {
                            type: 'GFManager.model.Activity',
                            create: true
                        }
                    }
                }
            };

            this.createTab('activity', record, editTab);
        }
    },

    onActivityGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };

            Ext.getStore('Activity').load();
            Ext.getStore('ActivityMission').load();
            Ext.getStore('Mission').load();
        }
    },

    onBadgeTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_badge_btn_over');
    },

    onBadgeTabMouseOut: function(button, e, eOpts) {

        if(button.active) {

            button.setIconCls('left_menu_badge_btn_over');

        } else {

            button.setIconCls('left_menu_badge_btn');

        }
    },

    onBadgeTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_badge_btn');
    },

    onGridpanelViewBadge: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {

            var editTab = {
                xtype: 'badgeedit',
                viewModel:{
                    data: {
                        theBadge: record || {
                            type: 'GFManager.model.Badge',
                            create: true
                        }
                    }
                }
            };

            this.createTab('badge', record, editTab);
        }
    },

    onBadgeGridpanelBeforeRender: function(component, eOpts) {


        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Badge').load();
        }


    },

    onPointTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_point_btn_over');
    },

    onPointTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_point_btn_over');

        } else {

            button.setIconCls('left_menu_point_btn');

        }
    },

    onPointTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_point_btn');
    },

    onGridpanelViewPoint: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'pointedit',
                viewModel:{
                    data: {
                        thePoint: record || {
                            type: 'GFManager.model.Point',
                            create: true
                        }
                    }
                }
            };

            this.createTab('point', record, editTab);
        }
    },

    onPointGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };

            Ext.getStore('Point').load();
        }
    },

    onLevelTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_level_btn_over');
    },

    onLevelTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_level_btn_over');

        } else {

            button.setIconCls('left_menu_level_btn');

        }
    },

    onLevelTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_level_btn');
    },

    onGridpanelViewLevel: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'leveledit',
                viewModel:{
                    data: {
                        theLevel: record || {
                            type: 'GFManager.model.Level',
                            create: true
                        }
                    }
                }
            };

            this.createTab('level', record, editTab);
        }
    },

    onLevelGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();

        }


    },

    onStatusTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_status_btn_over');
    },

    onStatusTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_status_btn_over');

        } else {

            button.setIconCls('left_menu_status_btn');

        }
    },

    onStatusTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_status_btn');
    },

    onGridpanelViewStatus: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'statusedit',
                viewModel:{
                    data: {
                        theStatus: record || {
                            type: 'GFManager.model.Status',
                            create: true
                        }
                    }
                }
            };

            this.createTab('status', record, editTab);
        }
    },

    onStatusGridpanelBeforeRender: function(component, eOpts) {

        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('RepoStatus').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
            Ext.getStore('RepoStatus').load();
            Ext.getStore('StatusClass').load();
        }

    },

    onPermissionTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_permission_btn_over');
    },

    onPermissionTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_permission_btn_over');


        } else {

            button.setIconCls('left_menu_permission_btn');

        }
    },

    onPermissionTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_permission_btn');
    },

    onGridpanelViewPermission: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'permissionedit',
                viewModel:{
                    data: {
                        thePermission: record || {
                            type: 'GFManager.model.Permission',
                            create: true
                        }
                    }
                }
            };

            this.createTab('permission', record, editTab);
        }
    },

    onPermissionGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };



            Ext.getStore('Permission').load();
            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
            Ext.getStore('StatusClass').load();
        }


    },

    onMissionTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_mission_btn_over');
    },

    onMissionTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_mission_btn_over');

        } else {

            button.setIconCls('left_menu_mission_btn');

        }
    },

    onMissionTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_mission_btn');
    },

    onGridpanelViewMission: function(gridpanel, record) {
        if(record !== null && record.dropped) {
            this.closeTab(record.get('id'));
        } else {
            var editTab = {
                xtype: 'missionedit',
                viewModel:{
                    data: {
                        theMission: record || {
                            type: 'GFManager.model.Mission',
                            create: true
                        }
                    }
                }
            };

            this.createTab('mission', record, editTab);
        }
    },

    onMissionGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Mission').load();
            Ext.getStore('Activity').load();
            Ext.getStore('Badge').load();
            Ext.getStore('Permission').load();
            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
            Ext.getStore('Rule').load();
        }

    },

    onAllCloseManagerButtonClick: function(button, e, eOpts) {
        this.fireViewEvent('managerTabpanelRemoveAll', this, null);
    }

});
