/*
 * File: app/view/manager/level/LevelEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.level.LevelEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.leveledit',

    onCancelLevel: function() {
        var level			= this.getViewModel().get('theLevel');


        if(!level.create) {
            var isDirtyLevel	= level.dirty;

            var levelEntity			= Ext.getStore('LevelEntity');
            var isDirtyLevelEntity	= levelEntity.getModifiedRecords().length;


            if(isDirtyLevel)  {

                if(!level.create) {
                    Ext.getStore('Level').rejectChanges();

                    //==================================================================
                    var relation_method		= this.getViewModel().get('theLevel').get('relation_method');
                    var relation_object		= this.getViewModel().get('theLevel').get('relation_object');

                    var method_radiogroup 	= this.lookupReference('relation_method');
                    var relationFactorList	= this.lookupReference('relation_factor');
                    var store;

                    if(relation_method == 'mission_type') {

                        store	= Ext.getStore('RelationFactor');
                        method_radiogroup.items.items[1].setValue(true);

                    } else if(relation_method == 'point_type') {

                        store	= Ext.getStore('Point');
                        method_radiogroup.items.items[0].setValue(true);

                    }

                    relationFactorList.bindStore(store);
                    relationFactorList.setValue(relation_object);
                    //==================================================================


                    var levelIcon = this.lookupReference('levelIcon');
                    this.onSelectedLevelIcon(levelIcon);
                }

            }


            if(isDirtyLevelEntity) {

                levelEntity.rejectChanges();
                var bindLevelEntityData = this.getViewModel().get('theLevel').get('level_table');
                levelEntity.loadRawData(bindLevelEntityData, false);

            }

        }
    },

    onRequestLevel: function(max, difficulty, type, id) {
        var me = this;
        Ext.Ajax.request({
            url: '/manager/rewards/leveltable',
            method: 'GET',
            params:{
                maxLevel: max,
                difficulty: difficulty,
                rtype: type,
                rid: id
            },
            success: function(response){
                console.log(response);

                var decodeResponse 		= Ext.decode(response.responseText);
                var levelEntityStore	= Ext.getStore('LevelEntity');
                levelEntityStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    onSelectedLevelIcon: function(component) {
        var level	= this.getViewModel().get('theLevel');

        if(!level.create) {
            if(level.get('icon') == '/resources/images/levels/level_01.png') {
                component.selModel.select(component.dataSource.data.items[0]);
            } else if(level.get('icon') == '/resources/images/levels/level_02.png') {
                component.selModel.select(component.dataSource.data.items[1]);
            } else if(level.get('icon') == '/resources/images/levels/level_1.png') {
                component.selModel.select(component.dataSource.data.items[2]);
            } else if(level.get('icon') == '/resources/images/levels/level_2.png') {
                component.selModel.select(component.dataSource.data.items[3]);
            } else if(level.get('icon') == '/resources/images/levels/level_tv.png') {
                component.selModel.select(component.dataSource.data.items[4]);
            } else if(level.get('icon') == '/resources/images/levels/level_trophy.png') {
                component.selModel.select(component.dataSource.data.items[5]);
            }

        }
    },

    onLevelSaveButtonClick: function(button, e, eOpts) {
        var levelEditTab = button.up('leveledit');
        var me = this;

        var saveLevel = levelEditTab.getViewModel().get('theLevel');

        var isLevelEntity = Ext.getStore('LevelEntity').getModifiedRecords().length;

        var method_radiogroup = this.lookupReference('relation_method');
        var difficultyCmp 		= this.lookupReference('difficulty');

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        if(saveLevel.create) {

            if(levelEditTab.isValid()) {

                if(!saveLevel.id || !saveLevel.name || !saveLevel.description ||
                !saveLevel.relation_object || !saveLevel.max || !saveLevel.icon) {
                    Ext.toast({
                        title: 'Level-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                } else {
                    var levelStore	= Ext.getStore('Level');
                    var level 		= Ext.create('GFManager.model.Level');
                    var relation_method;

                    level.set('id', saveLevel.id);
                    level.set('name', saveLevel.name);
                    level.set('description', saveLevel.description);

                    if(method_radiogroup.items.items[0].value) {
                        relation_method = method_radiogroup.items.items[0].inputValue;
                    } else if(method_radiogroup.items.items[1].value) {
                        relation_method = method_radiogroup.items.items[1].inputValue;
                    }

                    level.set('relation_method', relation_method);
                    level.set('relation_object', saveLevel.relation_object);
                    level.set('max', saveLevel.max);
                    level.set('icon', saveLevel.icon);

                    var max			= saveLevel.max;
                    var difficulty	= difficultyCmp.value;
                    var type		= relation_method;
                    var id			= saveLevel.relation_object;

                    var levelEntityStore	= Ext.getStore('LevelEntity');
                    var ckLoadBtntoStore	= levelEntityStore.data.length;

                    if(ckLoadBtntoStore === 0) {		//불러오기 버튼을 클릭하지 않았다면
                        Ext.toast({
                            title: 'Level-저장 실패' ,
                            html: '불러오기 버튼을 클릭하여 레벨표를 완성하고 저장해주세요.<br>(*필수입력 : 연동방식, 연동요소, 최대레벨 및 난이도)',
                            align: 't',
                            bodyPadding:10
                        });

                    } else {

                        if(max && difficulty && type && id) {	//값이 있으면

                            if(id.indexOf('.') == -1) {

                                Ext.Ajax.request({
                                    url: '/api/v1/manager/rewards/leveltable',
                                    method: 'GET',
                                    headers: {
                                        'x-key': key,
                                        'x-access-token': token
                                    },
                                    params:{
                                        maxLevel: max,
                                        difficulty: difficulty,
                                        rtype: type,
                                        rid: id
                                    },
                                    success: function(response){

                                        var decodeResponse 		= Ext.decode(response.responseText);
                                        var levelEntityStore	= Ext.getStore('LevelEntity');
                                        levelEntityStore.loadData(decodeResponse.data, false);

                                        level.set('level_table', decodeResponse.data);


                                        levelStore.add(level);
                                        levelStore.save();
                                        levelStore.commitChanges();

                                        levelEditTab.close();


                                        Ext.toast({
                                            title: 'Level-추가',
                                            html: '새로운 Level ('+ saveLevel.name+ ') 가 성공적으로 추가되었습니다.',
                                            align: 't',
                                            bodyPadding:10
                                        });

                                    },
                                    failure: function(response){console.log(response);}

                                });
                            } else {

                                Ext.toast({
                                    title: 'Level-저장 실패' ,
                                    html: '필드값을 다시 확인해주세요.',
                                    align: 't',
                                    bodyPadding:10
                                });
                            }
                        } else {			//값이 없으면

                            Ext.toast({
                                title: 'Level-저장 실패' ,
                                html: '필드값을 다시 확인해주세요.',
                                align: 't',
                                bodyPadding:10
                            });
                        }


                    }


                }

            } else {

                Ext.toast({
                    title: 'Level-저장 실패' ,
                    html: '필드값을 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });
            }




        } else {

            if(saveLevel.dirty || isLevelEntity) { 	//change
                if(levelEditTab.isValid()) {

                    if(!saveLevel.get('id') || !saveLevel.get('name') || !saveLevel.get('description') ||
                    !saveLevel.get('relation_object') || !saveLevel.get('max') || !saveLevel.get('icon')) {

                        Ext.toast({
                            title: 'Level-저장 실패' ,
                            html: '필드값을 다시 확인해주세요.',
                            align: 't',
                            bodyPadding:10
                        });

                    } else {

                        if(saveLevel.get('relation_object').indexOf('.') != -1) {
                            Ext.toast({
                                title: 'Level-저장 실패' ,
                                html: '필드값을 다시 확인해주세요.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {

                            Ext.MessageBox.confirm('Level-저장', saveLevel.get('name') + '의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                                if (btn == 'yes') {

                                    Ext.getStore('LevelEntity').save();
                                    Ext.getStore('LevelEntity').commitChanges();

                                    saveLevel.save();

                                    Ext.toast({
                                        title: 'Level-수정 완료' ,
                                        html: saveLevel.get('name') + '의 Level정보가 성공적으로 수정되었습니다.',
                                        align: 't',
                                        bodyPadding:10
                                    });

                                } else {
                                    me.onCancelLevel();
                                }
                            });
                        }




                    }






                } else {
                    Ext.toast({
                        title: 'Level-저장 실패' ,
                        html: '필드값을 다시 확인해주세요.',
                        align: 't',
                        bodyPadding:10
                    });
                }
            }
        }
    },

    onLevelCancelButtonClick: function(button, e, eOpts) {
        this.onCancelLevel();
    },

    onLevelIDTextfieldBeforeRender: function(component, eOpts) {
        var levelIDCmp		= this.lookupReference('levelID');
        var isCreateLevel	= this.getViewModel().get('theLevel').create;

        if(isCreateLevel) {
            levelIDCmp.setDisabled(false);
        } else {
            levelIDCmp.setDisabled(true);
        }
    },

    onLevelRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        var radioPosition 		= newValue.method;
        var isCreateLevel		= this.getViewModel().get('theLevel').create;
        var relationFactorCmp	= this.lookupReference('relation_factor');
        var store;


        if(isCreateLevel) {		//새로운 Level 추가시
            if(radioPosition == 'point_type') {
                store =  Ext.getStore('Point');
            } else if(radioPosition == 'mission_type') {
                store =  Ext.getStore('RelationFactor');
            }
        } else {

            if(radioPosition == 'point_type') {
                store =  Ext.getStore('Point');
                this.getViewModel().get('theLevel').set('relation_method', 'point_type');
            } else if(radioPosition == 'mission_type') {
                store =  Ext.getStore('RelationFactor');
                this.getViewModel().get('theLevel').set('relation_method', 'mission_type');
            }
        }

        relationFactorCmp.bindStore(store);

        var value 		= relationFactorCmp.value;
        var rawValue	= relationFactorCmp.rawValue;

        if(value == rawValue) {
            relationFactorCmp.setValue('');
        }
    },

    onLevelRadiogroupBeforeRender: function(component, eOpts) {
        var relationMethodCmp	= this.lookupReference('relation_method');
        var isCreateLevel		= this.getViewModel().get('theLevel').create;

        if(isCreateLevel) {		//새로운 Level 추가시
            relationMethodCmp.items.items[0].setValue(true);
        } else {
            //연동방식 init
            var relation_method = this.getViewModel().get('theLevel').get('relation_method');

            //연동방식에 따른 Radio버튼 위치 및 연동요소 Store 설정
            if(relation_method == 'point_type'){	//연동방식이 Point일 경우,
                relationMethodCmp.items.items[0].setValue(true);
            } else if(relation_method == 'mission_type') {	//연동방식이 Mission일 경우,
                relationMethodCmp.items.items[1].setValue(true);
            }
        }
    },

    onRelationFactorComboboxSelect: function(combo, record, eOpts) {
        var selectedRelationFactor	= record.get('name');
        var isCondition 			= this.lookupReference('condition');

        if(selectedRelationFactor !== '특정 mission') {

            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false
            });

        } else {


            isCondition.setEditor({
                xtype: 'numberfield',
                allowBlank: false,
                editable: false,
                disabled: true
            });

        }
    },

    onLevelComboboxBeforeRender: function(component, eOpts) {
        component.setValue(5);
    },

    onLevelLoadButtonClick: function(button, e, eOpts) {
        var levelEditTab	= button.up('leveledit');
        var level 			= levelEditTab.getViewModel().get('theLevel');

        var isCreateLevel	= level.create;
        var difficultyCmp	= this.lookupReference('difficulty');
        var me				= this;

        var max;
        var difficulty;
        var type;
        var id;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        if(isCreateLevel) {

            if(!difficultyCmp.value || !level.relation_object || !level.max) {
                Ext.toast({
                    title: 'Level-불러오기 실패' ,
                    html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동방식, 연동요소, 최대레벨 및 난이도)',
                    align: 't',
                    bodyPadding:10
                });
            } else {
                max			= level.max;
                difficulty	= difficultyCmp.value;
                var method_radiogroup = this.lookupReference('relation_method');
                if(method_radiogroup.items.items[0].value) {			type = 'point_type';	}
                else if(method_radiogroup.items.items[1].value) {		type = 'mission_type';	}
                id			= level.relation_object;

                if(id.indexOf('.') == -1) {
                    Ext.Ajax.request({
                        url: '/api/v1/manager/rewards/leveltable',
                        method: 'GET',
                        headers: {
                            'x-key': key,
                            'x-access-token': token
                        },
                        params:{
                            maxLevel: max,
                            difficulty: difficulty,
                            rtype: type,
                            rid: id
                        },
                        success: function(response){

                            var decodeResponse 		= Ext.decode(response.responseText);
                            var levelEntityStore	= Ext.getStore('LevelEntity');
                            levelEntityStore.loadData(decodeResponse.data, false);

                        },
                        failure: function(response){console.log(response);}

                    });
                } else {
                    Ext.toast({
                        title: 'Level-불러오기 실패' ,
                        html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동방식, 연동요소, 최대레벨 및 난이도)',
                        align: 't',
                        bodyPadding:10
                    });

                }



            }

        } else {





            //==================================================================================================



            max 		= level.get('max');
            difficulty	= difficultyCmp.value;
            type		= level.get('relation_method');
            id			= level.get('relation_object');

            var me = this;



            if(max && difficulty && type && id) {
                if(id.indexOf('.') == -1) {


                    Ext.Ajax.request({
                        url: '/api/v1/manager/rewards/leveltable',
                        method: 'GET',
                        headers: {
                            'x-key': key,
                            'x-access-token': token
                        },
                        params:{
                            maxLevel: max,
                            difficulty: difficulty,
                            rtype: type,
                            rid: id
                        },
                        success: function(response){
                            // console.log(response);

                            var decodeResponse 		= Ext.decode(response.responseText);
                            var levelEntityStore	= Ext.getStore('LevelEntity');
                            levelEntityStore.loadData(decodeResponse.data, false);

                            me.getViewModel().get('theLevel').set('level_table', decodeResponse.data);

                        },
                        failure: function(response){console.log(response);}

                    });
                } else {

                    Ext.toast({
                        title: 'Level-불러오기 실패' ,
                        html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동방식, 연동요소, 최대레벨 및 난이도)',
                        align: 't',
                        bodyPadding:10
                    });
                }
            } else {

                Ext.toast({
                    title: 'Level-불러오기 실패' ,
                    html: '필드값을 다시 확인해주세요.<br>(*필수입력 : 연동방식, 연동요소, 최대레벨 및 난이도)',
                    align: 't',
                    bodyPadding:10
                });
            }

        }
    },

    onLevelGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var isCreateLevel		= this.getViewModel().get('theLevel').create;

        if(isCreateLevel) {		//새로운 Level 추가시

        } else {

            var relation_object	= this.getViewModel().get('theLevel').get('relation_object');
            var isCondition		= this.lookupReference('condition');

            if(relation_object !== 'relation_factor_02') {

                isCondition.setEditor({
                    xtype: 'numberfield',
                    allowBlank: false
                });

            } else {

                isCondition.setEditor({
                    xtype: 'numberfield',
                    allowBlank: false,
                    editable: false,
                    disabled: true
                });

            }

        }
    },

    onLevelDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        this.getViewModel().set('theLevel.icon', record.getData().icon);
    },

    onDataviewLevelAfterRender: function(component, eOpts) {
        this.onSelectedLevelIcon(component);
    },

    onLevelFormShow: function(component, eOpts) {
        var isCreateLevel		= this.getViewModel().get('theLevel').create;

        if(isCreateLevel) {
            var levelEntityStore = Ext.getStore('LevelEntity');
            levelEntityStore.loadData('', false);
        } else {
            var levelEntityStore = Ext.getStore('LevelEntity');
            var bindLevelEntityData = this.getViewModel().get('theLevel').get('level_table');
            levelEntityStore.loadRawData(bindLevelEntityData, false);
        }
    },

    onLevelFormDeactivate: function(component, eOpts) {
        if(component.itemId == 'level_edittab') {

        } else {
            if(!this.getViewModel().data.theLevel.dropped) {
                var level		= this.getViewModel().get('theLevel');

                var isDirtyLevel	= level.dirty;
                var isCreateLevel	= level.create;
                var me = this;

                if(isDirtyLevel)  {

                    Ext.MessageBox.confirm('Level-저장', level.get('name')+'의 정보가 변경되었습니다. 저장하시겠습니까?', function(btn){
                        if (btn == 'yes') {

                            level.save();

                            Ext.toast({
                                title: 'Level-수정 완료' ,
                                html: level.get('name') + '의 Level정보가 성공적으로 수정되었습니다.',
                                align: 't',
                                bodyPadding:10
                            });
                        } else {
                            me.onCancelLevel();
                        }
                    });
                }
            }
        }
    }

});
