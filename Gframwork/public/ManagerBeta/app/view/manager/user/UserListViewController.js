/*
 * File: app/view/manager/user/UserListViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.manager.user.UserListViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.userlist',

    viewUser: function(record) {
        this.fireViewEvent('viewUser', this.getView(), record);
    },

    onUserListFilefieldChange: function(filefield, value, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var userListImport	= this.lookupReference('userListImport');

            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');


            var encodedFilename = Ext.urlEncode({ 'x_key': key, 'access_token': token });

            userListImport.submit({
                url:'/api/v1/manager/users/list?' + encodedFilename,
                method: 'POST',
                waitMsg: '사용자 리스트 로드 중...',
                success: function(response, records){
                    var userStore = Ext.getStore('User');

                    userStore.reload();
                }
            });

        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }



    },

    onUserAddButtonClick: function(button, e, eOpts) {
        this.viewUser(null);
    },

    onUserDelButtonClick: function(button, e, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var UserGrid	= button.up('userlist');
            var selection	= UserGrid.getSelectionModel().getSelection()[0];
            selection.erase();

            this.viewUser(selection);

            button.disable();
        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }
    },

    onUserSearchButtonClick: function(button, e, eOpts) {
        var search_user_cmp			= this.lookupReference('searchUser');
        var search_result_cmp		= this.lookupReference('searchResultUser');
        var search_result_toolbar	= this.lookupReference('searchResultToolbar');

        var users_store 			= Ext.getStore('User');

        var user_search 			= users_store.findRecord('name', search_user_cmp.value);

        if(user_search !== null){

            search_result_toolbar.show();
            search_result_cmp.setValue(user_search.get('name'));
            this.viewUser(user_search);

        } else {

            Ext.toast({
                title: 'User-검색 실패' ,
                html:  search_user_cmp.value + '의 정보를 찾지 못하였습니다.',
                align: 't',
                bodyPadding:10
            });

            search_user_cmp.setValue('');
            search_result_toolbar.hide();

        }
    },

    onUserlistviewSelectionChange: function(model, selected, eOpts) {
        var delBtn = this.lookupReference('del_user_btn');
        delBtn.enable();
    },

    onUserGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.viewUser(record);
    }

});
