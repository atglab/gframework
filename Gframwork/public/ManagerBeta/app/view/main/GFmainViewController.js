/*
 * File: app/view/main/GFmainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.main.GFmainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.gfmain',

    onHomeButtonMouseOut: function(button, e, eOpts) {

        if(button.pressed) {
            button.setIconCls('top_menu_home_btn_over');
        } else {
            button.setIconCls('top_menu_home_btn');
        }

    },

    onHomeButtonMouseOver: function(button, e, eOpts) {

        button.setIconCls('top_menu_home_btn_over');

    },

    onHomeButtonClick: function(button, e, eOpts) {
        //if(Ext.getStore('ManagerInfo').data.length !== 0) {
        var home 		= this.lookupReference('home');
        var manager 	= this.lookupReference('manager');
        var analyzer	= this.lookupReference('analyzer');

        home.show();
        manager.hide();
        analyzer.hide();
        /*} else {
        Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
        if (btn == 'ok') {

        }
        }, this);
        }*/



    },

    onHomeButtonToggle: function(button, pressed, eOpts) {

        if(!pressed) {
            button.setIconCls('top_menu_home_btn');
        }

    },

    onManagerButtonMouseOut: function(button, e, eOpts) {

        if(button.pressed) {
            button.setIconCls('top_menu_manager_btn_over');
        } else {
            button.setIconCls('top_menu_manager_btn');
        }

    },

    onManagerButtonMouseOver: function(button, e, eOpts) {

        button.setIconCls('top_menu_manager_btn_over');

    },

    onManagerButtonClick: function(button, e, eOpts) {
        //if(Ext.getStore('ManagerInfo').data.length !== 0) {

        var home 		= this.lookupReference('home');
        var manager 	= this.lookupReference('manager');
        var analyzer	= this.lookupReference('analyzer');

        home.hide();
        manager.show();
        analyzer.hide();
        /*} else {
        Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
        if (btn == 'ok') {
        }
        }, this);
        }*/



    },

    onManagerButtonToggle: function(button, pressed, eOpts) {

        if(!pressed) {
            button.setIconCls('top_menu_manager_btn');
        } else {

        }

    },

    onAnalyzerButtonMouseOut: function(button, e, eOpts) {
        if(button.pressed) {
            button.setIconCls('top_menu_analyzer_btn_over');
        } else {
            button.setIconCls('top_menu_analyzer_btn');
        }
    },

    onAnalyzerButtonMouseOver: function(button, e, eOpts) {
        button.setIconCls('top_menu_analyzer_btn_over');

    },

    onAnalyzerButtonClick: function(button, e, eOpts) {
        //if(Ext.getStore('ManagerInfo').data.length !== 0) {

        var home 		= this.lookupReference('home');
        var manager 	= this.lookupReference('manager');
        var analyzer	= this.lookupReference('analyzer');

        home.hide();
        manager.hide();
        analyzer.show();
        /*} else {
        Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
        if (btn == 'ok') {

        }
        }, this);
        }*/
    },

    onAnalyzerButtonToggle: function(button, pressed, eOpts) {

        if(!pressed) {
            button.setIconCls('top_menu_analyzer_btn');
        }

    },

    onLoginButtonClick: function(button, e, eOpts) {
        var loginEdit = new GFManager.view.main.login.EditManager({
        });
        loginEdit.show();
    },

    onLogoutButtonClick: function(button, e, eOpts) {
        var loginBtn = this.lookupReference('loginBtn');
        var logoutBtn = this.lookupReference('logoutBtn');
        var me		= this;

        if(logoutBtn.text === '로그아웃') {

            Ext.MessageBox.confirm('확인', '로그아웃 하시겠습니까?', function(btn){
                if (btn == 'yes') {

                    loginBtn.hide();
                    logoutBtn.setText('로그인');

                    var manager = me.lookupReference('manager');
                    manager.lookupReference('maintabeditpanel').removeAll();

                    var analyzer = me.lookupReference('analyzer');
                    analyzer.lookupReference('AnalysisEditPanel').removeAll();

                    var home = me.lookupReference('home');


                    Ext.getStore('ManagerInfo').removeAll();
                    Ext.getStore('User').removeAll();
                    Ext.getStore('Activity').removeAll();
                    Ext.getStore('ActivityMission').removeAll();
                    Ext.getStore('Mission').removeAll();
                    Ext.getStore('Badge').removeAll();
                    Ext.getStore('Point').removeAll();
                    Ext.getStore('Level').removeAll();
                    Ext.getStore('Status').removeAll();
                    Ext.getStore('Permission').removeAll();
                    Ext.getStore('StatusClass').removeAll();
                    Ext.getStore('Rule').removeAll();
                    Ext.getStore('RepoStatus').removeAll();



                    //console.log(manager.items.items[0].setDisabled(true));
                    //home.hide();

                    //manager.hide();
                    //analyzer.hide();
                } else {

                }
            });

        } else {
            var loginView = new GFManager.view.main.login.LoginMain({
            });
            loginView.show();
        }
    },

    onContainerTabpanelRemoveAll: function(container) {
        var manager = this.lookupReference('manager');
        manager.lookupReference('maintabeditpanel').removeAll();

        var analyzer = this.lookupReference('analyzer');
        analyzer.lookupReference('AnalysisEditPanel').removeAll();
    },

    onManagerTabpanelRemoveAll: function(container) {
        var manager = this.lookupReference('manager');
        manager.lookupReference('maintabeditpanel').removeAll();

    },

    onTabpanelRemoveAllinManager: function(container) {
        var manager = this.lookupReference('manager');
        manager.lookupReference('maintabeditpanel').removeAll();

        var analyzer = this.lookupReference('analyzer');
        analyzer.lookupReference('AnalysisEditPanel').removeAll();
    },

    onAnalyzerTabpanelRemoveAll: function(container) {
        var analyzer = this.lookupReference('analyzer');
        analyzer.lookupReference('AnalysisEditPanel').removeAll();
    }

});
