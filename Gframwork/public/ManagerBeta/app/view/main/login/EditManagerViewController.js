/*
 * File: app/view/main/login/EditManagerViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.main.login.EditManagerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.editmanager',

    onEditButtonClick: function(button, e, eOpts) {
        var managerID			= this.lookupReference('managerID');
        var password			= this.lookupReference('password');
        var newPassword			= this.lookupReference('newPassword');
        var confirmNewPassword	= this.lookupReference('confirmNewPassword');

        if(newPassword.value == confirmNewPassword.value) {
            //step1. 서버로 managerID, password, newPassword 값 전송
            //step2. 서버는 클라이언트가 보낸 id와 password를 통해 관리자를 인증함.
            //step3. 서버는 인증이 된 관리자의 password를 newPassword로 변경

            if(Ext.getStore('ManagerInfo').data.length !== 0) {

                var key = Ext.getStore('PublicKey').data.items[0].get('key');


                var encrypt = new JSEncrypt();
                encrypt.setPublicKey(key);


                var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
                var token = Ext.getStore('ManagerInfo').data.items[0].get('token');


                var encryptedPW = encrypt.encrypt(password.value);
                var encryptedNPW = encrypt.encrypt(newPassword.value);

                var encryptedUserName = encrypt.encrypt(key);




                Ext.Ajax.request({
                    url: '/api/v1/changeadmin',
                    method: 'POST',
                    headers: {
                        'x-key': key,
                        'x-access-token': token
                    },
                    params:{
                        username: encryptedUserName,
                        password: encryptedPW,
                        newPassword: encryptedNPW
                    },
                    success: function(response){
                        var decodeResponse 		= Ext.decode(response.responseText);

                        var editManager 	= button.up('editmanager');
                        editManager.close();

                        Ext.toast({
                            title: '수정 완료' ,
                            html: 'Manager 정보를 성공적으로 수정하였습니다.',
                            align: 't',
                            bodyPadding:10
                        });


                    },
                    failure: function(response){
                        console.log(response);
                        Ext.MessageBox.alert('확인', '비밀번호를 다시 확인해주세요.', this, this);
                        password.setValue('');
                        newPassword.setValue('');
                        confirmNewPassword.setValue('');
                    }

                });



            }

        } else {
            Ext.MessageBox.alert('확인', '새로운 비밀번호를 다시 확인해주세요.', this, this);
            newPassword.setValue('');
            confirmNewPassword.setValue('');

        }
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var editManager 	= button.up('editmanager');
        editManager.close();
    },

    onWindowClose: function(panel, eOpts) {
        panel.container.component.lookupReference('loginBtn').show();
        var logoutBtn = panel.container.component.lookupReference('logoutBtn');
        logoutBtn.setText('로그아웃');
    }

});
