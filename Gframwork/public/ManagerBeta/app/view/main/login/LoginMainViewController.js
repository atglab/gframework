/*
 * File: app/view/main/login/LoginMainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.main.login.LoginMainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.loginmain',

    onLoginButtonClick: function(button, e, eOpts) {
        var managerID	= this.lookupReference('managerID');
        var managerPW	= this.lookupReference('managerPW');
        var loginMain 	= button.up('loginmain');


        var key = Ext.getStore('PublicKey').data.items[0].get('key');


        var encrypt = new JSEncrypt();
        encrypt.setPublicKey(key);

        var encryptedID = encrypt.encrypt(managerID.value);
        var encryptedPW = encrypt.encrypt(managerPW.value);


        Ext.Ajax.request({
            url: '/login',
            method: 'POST',
            params:{
                username: encryptedID,
                password: encryptedPW
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                if(decodeResponse.success) {

                    var managerInfo = Ext.getStore('ManagerInfo');
                    managerInfo.removeAll();
                    managerInfo.add({
                        token: decodeResponse.data.token,
                        key: decodeResponse.data.user.username
                    });


                    loginMain.close();

                }

            },
            failure: function(response){
                managerID.setValue('');
                managerPW.setValue('');

                Ext.toast({
                    title: '관리자 계정 확인' ,
                    html: '아이디 또는 비밀번호를 다시 확인해주세요.',
                    align: 't',
                    bodyPadding:10
                });

            }

        });
    },

    onWindowClose: function(panel, eOpts) {
        if(panel.isFirstInstance) {
            var managerID	= this.lookupReference('managerID');
            var loginSuccess = new GFManager.view.main.GFmain({
                viewModel: {
                    data: {
                        theManager: managerID.value
                    }
                }
            });
            loginSuccess.show();
        } else {
            if(Ext.getStore('ManagerInfo').data.length !== 0) {

                var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
                var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

                Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };
                Ext.getStore('RepoStatus').proxy.headers = { 'x-key': key, 'x-access-token': token };


                Ext.getStore('User').load();
                Ext.getStore('Mission').load();
                Ext.getStore('Activity').load();
                Ext.getStore('ActivityMission').load();
                Ext.getStore('Badge').load();
                Ext.getStore('Permission').load();
                Ext.getStore('Status').load();
                Ext.getStore('Level').load();
                Ext.getStore('Point').load();
                Ext.getStore('Rule').load();
                Ext.getStore('StatusClass').load();
                Ext.getStore('RepoStatus').load();

            }
        }

        panel.container.component.lookupReference('loginBtn').show();
        var logoutBtn = panel.container.component.lookupReference('logoutBtn');
        logoutBtn.setText('로그아웃');

        /*panel.container.component.lookupReference('home').show();

        panel.container.component.lookupReference('analyzer').show();*/

    },

    onLoginWindowBeforeRender: function(component, eOpts) {
        Ext.Ajax.request({
            url: '/getpubkey',
            method: 'GET',
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var publicKey = Ext.getStore('PublicKey');
                publicKey.removeAll();
                publicKey.add({
                    key: decodeResponse.data
                });
            },
            failure: function(response){
                console.log(response);
            }

        });
    }

});
