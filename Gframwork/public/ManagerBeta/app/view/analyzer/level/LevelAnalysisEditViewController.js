/*
 * File: app/view/analyzer/level/LevelAnalysisEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.analyzer.level.LevelAnalysisEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.levelanalysisedit',

    getStatisticsAllLevels: function() {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/levels',
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var levelAnalysisAllStore	= me.getStore('levelAnalysisAll');
                levelAnalysisAllStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsLevel: function(levelId) {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/levels/'+levelId,
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var levelAnalysisStore	= me.getStore('levelAnalysis');
                levelAnalysisStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsLevelsByPeriod: function(period) {
        var level	= this.getViewModel().get('theLevel');
        var me 		= this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');


        if(level.create) {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/levelsbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var levelAnalysisPeriodStore	= me.getStore('levelAnalysisPeriod');
                    levelAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}

            });

        } else {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/levelsbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    id: level.get('id'),
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var levelAnalysisPeriodStore	= me.getStore('levelAnalysisPeriod');
                    levelAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}

            });
        }
    },

    onLevelPeriodRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        this. getStatisticsLevelsByPeriod(newValue.period);
    },

    onLevelAnalysisFormShow: function(component, eOpts) {
        var level				= this.getViewModel().get('theLevel');
        var statisticsAllLevels	= this.lookupReference('statisticsAllLevels');
        var statisticsLevel		= this.lookupReference('levelTopChartRef');

        var nStart = new Date().getTime();
        console.log('게임 메카닉 결과 분석 시작 시점(Level)');

        if(level.create) {
            this.getStatisticsAllLevels();

            statisticsAllLevels.show();
            statisticsLevel.hide();
        } else {
            this.getStatisticsLevel(level.get('id'));

            statisticsAllLevels.hide();
            statisticsLevel.show();
        }

        this.getStatisticsLevelsByPeriod(1);


        var nEnd =  new Date().getTime();
        console.log('게임 메카닉 결과 분석 종료 시점(Level)');

        var nDiff = nEnd - nStart;

        console.log('게임 메카닉 결과 분석 기능 반응 시간(Level) : '+ nDiff + ' (ms)');
    }

});
