/*
 * File: app/view/analyzer/point/PointAnalysisEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.analyzer.point.PointAnalysisEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.pointanalysisedit',

    getStatisticsAllPoints: function() {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/points',
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var pointAnalysisAllStore	= me.getStore('pointAnalysisAll');
                pointAnalysisAllStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsPoint: function(pointId) {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/points/'+pointId,
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var pointAnalysisStore	= me.getStore('pointAnalysis');
                pointAnalysisStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsPointsByPeriod: function(period) {
        var point	= this.getViewModel().get('thePoint');
        var me 		= this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        if(point.create) {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/pointsbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var pointAnalysisPeriodStore	= me.getStore('pointAnalysisPeriod');
                    pointAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}

            });

        } else {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/pointsbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    id: point.get('id'),
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var pointAnalysisPeriodStore	= me.getStore('pointAnalysisPeriod');
                    pointAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}

            });
        }
    },

    onPointPeriodRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        this.getStatisticsPointsByPeriod(newValue.period);
    },

    onPointAnalysisFormShow: function(component, eOpts) {
        var point				= this.getViewModel().get('thePoint');
        var statisticsAllPoints	= this.lookupReference('statisticsAllPoints');
        var statisticsPoints	= this.lookupReference('pointTopChartRef');


        var nStart = new Date().getTime();
        console.log('게임 메카닉 결과 분석 시작 시점(Point)');


        if(point.create) {
            this.getStatisticsAllPoints();
            statisticsAllPoints.show();
            statisticsPoints.hide();
        } else {
            this.getStatisticsPoint(point.get('id'));
            statisticsAllPoints.hide();
            statisticsPoints.show();
        }

        this.getStatisticsPointsByPeriod(1);



        var nEnd =  new Date().getTime();
        console.log('게임 메카닉 결과 분석 종료 시점(Point)');

        var nDiff = nEnd - nStart;

        console.log('게임 메카닉 결과 분석 기능 반응 시간(Point) : '+ nDiff + ' (ms)');
    }

});
