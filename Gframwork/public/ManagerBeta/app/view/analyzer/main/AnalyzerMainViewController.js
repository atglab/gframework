/*
 * File: app/view/analyzer/main/AnalyzerMainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.analyzer.main.AnalyzerMainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.analyzermainanalyzermain',

    createTab: function(prefix, record, cfg) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {

            var tabs = this.lookupReference('AnalysisEditPanel');
            var id, tab, title;

            if(record === null) {

                id		= prefix + '_edittab';
                title	=  '전체 ' + prefix + '통계';


            } else {
                id = record.get('id');

            }

            tab = tabs.items.getByKey(id);

            if(tab){
                // @TODO: before closing the tab, check to exist any change in the form.
                // so, if some change is detected, display a dialog to ask to a user
                //cfg.itemId = id;
                cfg.closable = true;

                tabs.setActiveTab(tab);

            }else{

                cfg.itemId = id;
                cfg.title = title;
                cfg.closable = true;
                tab = tabs.add(cfg);

                tabs.setActiveTab(tab);
            }

        } else {
            Ext.MessageBox.alert('로그인 요청', '로그인 후 이용이 가능합니다.', function(btn){
                if (btn == 'ok') {
                }
            }, this);

        }

    },

    onUserTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_user_btn_over');
    },

    onUserTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_user_btn_over');

        } else {

            button.setIconCls('left_menu_user_btn');

        }
    },

    onUserTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_user_btn');
    },

    onGridpanelViewUserAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'useranalysisedit',

            viewModel:{
                data: {
                    theUser: record || {
                        type: 'GFManager.model.User',
                        create: true
                    }
                }
            }
        };

        this.createTab('User', record, editTab);
    },

    onUseAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('User').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('User').load();
        }


    },

    onActivityTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_activity_btn_over');
    },

    onActivityTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_activity_btn_over');

        } else {

            button.setIconCls('left_menu_activity_btn');

        }
    },

    onActivityTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_activity_btn');
    },

    onGridpanelViewActivityAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'activityanalysisedit',

            viewModel:{
                data: {
                    theActivity: record || {
                        type: 'GFManager.model.Activity',
                        create: true
                    }
                }
            }
        };

        this.createTab('Activity', record, editTab);
    },

    onActivityAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('ActivityMission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };

            Ext.getStore('Activity').load();
            Ext.getStore('ActivityMission').load();
            Ext.getStore('Mission').load();
        }


    },

    onBadgeTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_badge_btn_over');
    },

    onBadgeTabMouseOut: function(button, e, eOpts) {

        if(button.active) {

            button.setIconCls('left_menu_badge_btn_over');

        } else {

            button.setIconCls('left_menu_badge_btn');

        }
    },

    onBadgeTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_badge_btn');
    },

    onGridpanelViewBadgeAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'badgeanalysisedit',

            viewModel:{
                data: {
                    theBadge: record || {
                        type: 'GFManager.model.Badge',
                        create: true
                    }
                }
            }
        };

        this.createTab('Badge', record, editTab);
    },

    onBadgeAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };

            Ext.getStore('Badge').load();
        }


    },

    onPointTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_point_btn_over');
    },

    onPointTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_point_btn_over');

        } else {

            button.setIconCls('left_menu_point_btn');

        }
    },

    onPointTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_point_btn');
    },

    onGridpanelViewPointAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'pointanalysisedit',

            viewModel:{
                data: {
                    thePoint: record || {
                        type: 'GFManager.model.Point',
                        create: true
                    }
                }
            }
        };

        this.createTab('Point', record, editTab);
    },

    onPointAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };

            Ext.getStore('Point').load();
        }

    },

    onLevelTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_level_btn_over');
    },

    onLevelTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_level_btn_over');

        } else {

            button.setIconCls('left_menu_level_btn');

        }
    },

    onLevelTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_level_btn');
    },

    onGridpanelViewLevelAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'levelanalysisedit',

            viewModel:{
                data: {
                    theLevel: record || {
                        type: 'GFManager.model.Level',
                        create: true
                    }
                }
            }
        };

        this.createTab('Level', record, editTab);
    },

    onLevelAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
        }
    },

    onStatusTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_status_btn_over');
    },

    onStatusTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_status_btn_over');

        } else {

            button.setIconCls('left_menu_status_btn');

        }
    },

    onStatusTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_status_btn');
    },

    onGridpanelViewStatusAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'statusanalysisedit',

            viewModel:{
                data: {
                    theStatus: record || {
                        type: 'GFManager.model.Status',
                        create: true
                    }
                }
            }
        };

        this.createTab('Status', record, editTab);
    },

    onStatusAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
        }

    },

    onPermissionTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_permission_btn_over');
    },

    onPermissionTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_permission_btn_over');


        } else {

            button.setIconCls('left_menu_permission_btn');

        }
    },

    onPermissionTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_permission_btn');
    },

    onGridpanelViewPermissionAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'permissionanalysisedit',

            viewModel:{
                data: {
                    thePermission: record || {
                        type: 'GFManager.model.Permission',
                        create: true
                    }
                }
            }
        };

        this.createTab('Permission', record, editTab);
    },

    onPermissionAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('StatusClass').proxy.headers = { 'x-key': key, 'x-access-token': token };



            Ext.getStore('Permission').load();
            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
            Ext.getStore('StatusClass').load();

        }

    },

    onMissionTabMouseOver: function(button, e, eOpts) {
        button.setIconCls('left_menu_mission_btn_over');
    },

    onMissionTabMouseOut: function(button, e, eOpts) {
        if(button.active) {

            button.setIconCls('left_menu_mission_btn_over');

        } else {

            button.setIconCls('left_menu_mission_btn');

        }
    },

    onMissionTabDeactivate: function(tab, eOpts) {
        tab.setIconCls('left_menu_mission_btn');
    },

    onGridpanelViewMissionAnalysis: function(gridpanel, record) {
        var editTab = {
            xtype: 'missionanalysisedit',

            viewModel:{
                data: {
                    theMission: record || {
                        type: 'GFManager.model.Mission',
                        create: true
                    }
                }
            }
        };

        this.createTab('Mission', record, editTab);
    },

    onMissionAnalysisGridpanelBeforeRender: function(component, eOpts) {
        if(Ext.getStore('ManagerInfo').data.length !== 0) {
            var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
            var token = Ext.getStore('ManagerInfo').data.items[0].get('token');
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Activity').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Badge').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Permission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Status').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Level').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Point').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Mission').proxy.headers = { 'x-key': key, 'x-access-token': token };
            Ext.getStore('Rule').proxy.headers = { 'x-key': key, 'x-access-token': token };


            Ext.getStore('Mission').load();
            Ext.getStore('Activity').load();
            Ext.getStore('Badge').load();
            Ext.getStore('Permission').load();
            Ext.getStore('Status').load();
            Ext.getStore('Level').load();
            Ext.getStore('Point').load();
            Ext.getStore('Mission').load();
            Ext.getStore('Rule').load();
        }
    },

    onAllCloseAnalyzerButtonClick: function(button, e, eOpts) {
        this.fireViewEvent('analyzerTabpanelRemoveAll', this, null);
    }

});
