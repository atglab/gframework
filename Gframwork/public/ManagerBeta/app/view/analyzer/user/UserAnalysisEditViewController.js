/*
 * File: app/view/analyzer/user/UserAnalysisEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.analyzer.user.UserAnalysisEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.useranalysisedit',

    getStatisticsAllUsers: function() {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/users',
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var userGenderTotal	= me.getStore('userGenderTotal');
                var userAgeTotal 	= me.getStore('userAgeTotal');

                userGenderTotal.loadData(decodeResponse.data.gender, false);
                userAgeTotal.loadData(decodeResponse.data.age, false);

            },
            failure: function(response){console.log(response);}
        });
    },

    getStatisticsUser: function(userId) {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/users/'+userId,
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){

                var decodeResponse 		= Ext.decode(response.responseText);

                var userId				= me.lookupReference('userId');
                var userName			= me.lookupReference('userName');
                var userNick			= me.lookupReference('userNick');
                var userGender			= me.lookupReference('userGender');
                var userAge				= me.lookupReference('userAge');
                var userImg				= me.lookupReference('userImg');


                userId.setValue(decodeResponse.data.basic.id);
                userName.setValue(decodeResponse.data.basic.name);
                userNick.setValue(decodeResponse.data.basic.nickname);
                userGender.setValue(decodeResponse.data.basic.gender);
                userAge.setValue(decodeResponse.data.basic.age);
                userImg.setSrc(decodeResponse.data.basic.profile);



                var badgesStore 		= me.getStore('badges');
                var pointsStore 		= me.getStore('points');
                var levelsStore 		= me.getStore('levels');
                var statusesStore 		= me.getStore('statuses');
                var permissionsStore	= me.getStore('permissions');
                var missionsStore		= me.getStore('missions');
                var activityLogsStore	= me.getStore('activityLogs');
                var rewardLogsStore		= me.getStore('rewardLogs');

                badgesStore.loadData(decodeResponse.data.badges, false);
                pointsStore.loadData(decodeResponse.data.points, false);
                levelsStore.loadData(decodeResponse.data.levels, false);
                statusesStore.loadData(decodeResponse.data.statuses, false);
                permissionsStore.loadData(decodeResponse.data.permissions, false);
                missionsStore.loadData(decodeResponse.data.missions, false);
                activityLogsStore.loadData(decodeResponse.data.activityLogs, false);
                rewardLogsStore.loadData(decodeResponse.data.rewardLogs, false);




                if(decodeResponse.data.badges.length === 0) {
                    var badgesPart	= me.lookupReference('badgesInfo');
                    badgesPart.hide();
                }

                if(decodeResponse.data.points.length === 0) {
                    var pointsPart	= me.lookupReference('pointsInfo');
                    pointsPart.hide();
                }

                if(decodeResponse.data.levels.length === 0) {
                    var levelsPart	= me.lookupReference('levelsInfo');
                    levelsPart.hide();
                }

                if(decodeResponse.data.statuses.length === 0) {
                    var statusesPart	= me.lookupReference('statusesInfo');
                    statusesPart.hide();
                }

                if(decodeResponse.data.permissions.length === 0) {
                    var permissionsPart	= me.lookupReference('permissionsInfo');
                    permissionsPart.hide();
                }


                if(decodeResponse.data.missions.length === 0) {
                    var missionsPart	= me.lookupReference('missionsInfo');
                    missionsPart.hide();
                }




            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsAllUsersByPeriod: function(period) {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/usersbyperiod',
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            params:{
                period: period
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var userAnalysisPeriodStore	= me.getStore('userAnalysisPeriod');
                userAnalysisPeriodStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    onUserPeriodRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        this.getStatisticsAllUsersByPeriod(newValue.period);
    },

    onUserAnalysisFormShow: function(component, eOpts) {
        var user				= this.getViewModel().get('theUser');

        var statisticsAllUsers	= this.lookupReference('allUserAnalysis');
        var statisticsUser		= this.lookupReference('specificUserAnalysis');

        var nStart = new Date().getTime();
        console.log('게임 메카닉 결과 분석 시작 시점(User)');

        if(user.create) {

            this.getStatisticsAllUsers();
            this.getStatisticsAllUsersByPeriod(1);

            statisticsAllUsers.show();
            statisticsUser.hide();
        } else {
            this.getStatisticsUser(user.id);

            statisticsAllUsers.hide();
            statisticsUser.show();
        }



        var nEnd =  new Date().getTime();
        console.log('게임 메카닉 결과 분석 종료 시점(User)');

        var nDiff = nEnd - nStart;

        console.log('게임 메카닉 결과 분석 기능 반응 시간(User) : '+ nDiff + ' (ms)');
    }

});
