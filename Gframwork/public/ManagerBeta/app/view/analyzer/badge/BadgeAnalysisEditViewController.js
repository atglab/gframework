/*
 * File: app/view/analyzer/badge/BadgeAnalysisEditViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GFManager.view.analyzer.badge.BadgeAnalysisEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.badgeanalysisedit',

    getStatisticsAllBadges: function() {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/badges',
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var badgeAnalysisAllStore	= me.getStore('badgeAnalysisAll');
                badgeAnalysisAllStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsBadge: function(badgeId) {
        var me = this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        Ext.Ajax.request({
            url: '/api/v1/analyzer/badges/'+badgeId,
            method: 'GET',
            headers: {
                'x-key': key,
                'x-access-token': token
            },
            success: function(response){
                var decodeResponse 		= Ext.decode(response.responseText);

                var badgeAnalysisStore	= me.getStore('badgeAnalysis');
                badgeAnalysisStore.loadData(decodeResponse.data, false);

            },
            failure: function(response){console.log(response);}

        });
    },

    getStatisticsBadgesByPeriod: function(period) {
        var badge	= this.getViewModel().get('theBadge');
        var me		= this;

        var key = Ext.getStore('ManagerInfo').data.items[0].get('key');
        var token = Ext.getStore('ManagerInfo').data.items[0].get('token');

        if(badge.create) {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/badgesbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var badgeAnalysisPeriodStore	= me.getStore('badgeAnalysisPeriod');
                    badgeAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}

            });

        } else {

            Ext.Ajax.request({
                url: '/api/v1/analyzer/badgesbyperiod',
                method: 'GET',
                headers: {
                    'x-key': key,
                    'x-access-token': token
                },
                params:{
                    id: badge.get('id'),
                    period: period
                },
                success: function(response){
                    var decodeResponse 		= Ext.decode(response.responseText);

                    var badgeAnalysisPeriodStore	= me.getStore('badgeAnalysisPeriod');
                    badgeAnalysisPeriodStore.loadData(decodeResponse.data, false);

                },
                failure: function(response){console.log(response);}
            });
        }
    },

    onBadgePeriodRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        this.getStatisticsBadgesByPeriod(newValue.period);
    },

    onBadgeAnalysisFormShow: function(component, eOpts) {
        var badge				= this.getViewModel().get('theBadge');
        var statisticsBadges	= this.lookupReference('statisticsBadges');
        var statisticsAllBadges	= this.lookupReference('statisticsAllBadges');


        var nStart = new Date().getTime();
        console.log('게임 메카닉 결과 분석 시작 시점(Badge)');


        if(badge.create) {
            this.getStatisticsAllBadges();
            statisticsAllBadges.show();
            statisticsBadges.hide();
        } else {
            this.getStatisticsBadge(badge.get('id'));
            statisticsAllBadges.hide();
            statisticsBadges.show();
        }

        this.getStatisticsBadgesByPeriod(1);

        var nEnd =  new Date().getTime();
        console.log('게임 메카닉 결과 분석 종료 시점(Badge)');

        var nDiff = nEnd - nStart;

        console.log('게임 메카닉 결과 분석 기능 반응 시간(Badge) : '+ nDiff + ' (ms)');
    }

});
